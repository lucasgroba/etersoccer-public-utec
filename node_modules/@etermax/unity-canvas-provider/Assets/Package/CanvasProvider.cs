using System.Collections.Generic;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;

namespace Etermax.Canvases.UnityDelivery.Provider{
	public static class CanvasProvider {
		private static readonly Dictionary<string, Canvas> _canvases = new Dictionary<string, Canvas>();

		public static Canvas CreateCanvasSystem(string id,
			string canvasName,
			int sortOrder,
			int widthResolution,
			int heightResolution,
			RenderMode renderMode,
			Camera camera) {
			Canvas canvas;
			if (_canvases.ContainsKey(id)) {
				canvas = _canvases[id];
				if (canvas == null) {
					canvas = CreateCanvas(canvasName, sortOrder, widthResolution, heightResolution, renderMode,
						camera);
					_canvases[id] = canvas;
				}						
			}
			else {
				canvas = CreateCanvas(canvasName, sortOrder, widthResolution, heightResolution, renderMode, camera);
				_canvases.Add(id, canvas);
			}

			CreateEventSystem();

			return canvas;
		}

		private static Canvas CreateCanvas(string canvasName, int sortOrder, int widthResolution, int heightResolution,
			RenderMode renderMode, Camera camera) {
			var canvasGameObject = new GameObject(canvasName);
			var canvas = canvasGameObject.AddComponent<Canvas>();
			canvas.renderMode = renderMode;
			canvas.worldCamera = camera;
			canvas.sortingOrder = sortOrder;

			var canvasScaler = canvasGameObject.AddComponent<CanvasScaler>();
			canvasScaler.uiScaleMode = CanvasScaler.ScaleMode.ScaleWithScreenSize;
			canvasScaler.referenceResolution = new Vector2(widthResolution, heightResolution);
			canvasScaler.screenMatchMode = CanvasScaler.ScreenMatchMode.MatchWidthOrHeight;
			canvasScaler.matchWidthOrHeight = 1;
			canvasScaler.referencePixelsPerUnit = 100;

			canvasGameObject.AddComponent<GraphicRaycaster>();
			return canvas;
		}

		private static void CreateEventSystem() {
			var eventSystem = GameObject.FindObjectOfType<EventSystem>();
			if (eventSystem != null) return;
			var eventSystemGameObject = new GameObject("EventSystem");
			eventSystemGameObject.AddComponent<EventSystem>();
			eventSystemGameObject.AddComponent<StandaloneInputModule>();
		}
	}
}