using UnityEngine;

public static class GameObjectExtensions
{
    public static void Stretch(this GameObject gameObject)
    {
        var rectTransform = gameObject.GetComponent<RectTransform>();
        if (rectTransform == null) return;
        rectTransform.anchorMin = new Vector2(0, 0);
        rectTransform.anchorMax = new Vector2(1, 1);
        rectTransform.offsetMax = Vector2.zero;
        rectTransform.offsetMin = Vector2.zero;
        rectTransform.pivot = new Vector2(0.5f, 0.5f);
        rectTransform.anchoredPosition = Vector2.zero;
    }

    public static void StretchBottom(this GameObject gameObject)
    {
        var rectTransform = gameObject.GetComponent<RectTransform>();
        if (rectTransform == null) return;
        rectTransform.anchorMin = new Vector2(0, 0);
        rectTransform.anchorMax = new Vector2(1, 0);
        rectTransform.offsetMax = new Vector2(0, rectTransform.offsetMax.y);
        rectTransform.offsetMin = Vector2.zero;
        rectTransform.pivot = new Vector2(0.5f, 0f);
    }

    public static void StretchMiddle(this GameObject gameObject, float posY)
    {
        var rectTransform = gameObject.GetComponent<RectTransform>();
        if (rectTransform == null) return;
        rectTransform.anchorMin = new Vector2(0, 0.5f);
        rectTransform.anchorMax = new Vector2(1, 0.5f);
        rectTransform.offsetMax = Vector2.zero;
        rectTransform.offsetMin = new Vector2(0, posY);
        rectTransform.pivot = new Vector2(0.5f, 0.5f);
        rectTransform.anchoredPosition = Vector2.zero;
    }

    public static void MiddleRight(this GameObject gameObject)
    {
        var rectTransform = gameObject.GetComponent<RectTransform>();
        if (rectTransform == null) return;
        rectTransform.anchorMin = new Vector2(1, 0.5f);
        rectTransform.anchorMax = new Vector2(1, 0.5f);
        rectTransform.offsetMax = new Vector2(0, rectTransform.offsetMax.y);
        rectTransform.offsetMin = new Vector2(0, rectTransform.offsetMin.y);
        rectTransform.pivot = new Vector2(1f, 0f);
    }

    public static void MiddleLeft(this GameObject gameObject)
    {
        var rectTransform = gameObject.GetComponent<RectTransform>();
        if (rectTransform == null) return;
        rectTransform.anchorMin = new Vector2(0, 0.5f);
        rectTransform.anchorMax = new Vector2(0, 0.5f);
        rectTransform.offsetMax = new Vector2(0, rectTransform.offsetMax.y);
        rectTransform.offsetMin = new Vector2(0, rectTransform.offsetMin.y);
        rectTransform.pivot = Vector2.zero;
    }

    public static void TopCenter(this GameObject gameObject)
    {
        var rectTransform = gameObject.GetComponent<RectTransform>();
        if (rectTransform == null) return;
        rectTransform.anchorMin = new Vector2(0.5f, 1);
        rectTransform.anchorMax = new Vector2(0.5f, 1);
        rectTransform.offsetMax = new Vector2(0, 0);
        rectTransform.offsetMin = new Vector2(0, rectTransform.offsetMin.y);
        rectTransform.pivot = new Vector2(0.5f, 1);
    }

    public static void StretchTop(this GameObject gameObject, float height = 0)
    {
        var rectTransform = gameObject.GetComponent<RectTransform>();
        if (rectTransform == null) return;
        rectTransform.anchorMin = new Vector2(0, 1);
        rectTransform.anchorMax = new Vector2(1, 1);
        rectTransform.offsetMax = Vector2.zero;
        rectTransform.offsetMin = new Vector2(0, height);
        rectTransform.pivot = new Vector2(0.5f, 1f);
    }

    public static void ScaleOne(this GameObject gameObject)
    {
        gameObject.GetComponent<Transform>().localScale = Vector3.one;
    }

    public static void CopyRectTransform(this GameObject gameObject, GameObject toOverride)
    {
        var left = gameObject.GetComponent<RectTransform>();

        var right = toOverride.GetComponent<RectTransform>();
        if (left == null || right == null) return;
        right.anchorMin = left.anchorMin;
        right.anchorMax = left.anchorMax;
        right.offsetMax = left.offsetMax;
        right.offsetMin = left.offsetMin;
        right.pivot = left.pivot;
        right.anchoredPosition = left.anchoredPosition;
    }
}