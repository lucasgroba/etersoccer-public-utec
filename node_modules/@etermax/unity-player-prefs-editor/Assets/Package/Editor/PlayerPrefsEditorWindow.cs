using System;
using UnityEditor;
using UnityEditorLayoutWrapper.Components;
using UnityEngine;

namespace Etermax.PlayerPrefsEditor {
    public class PlayerPrefsEditorWindow : EditorWindow {
        private string _keyText;
        private string _messageResult;
        private float _floatResult;
        private int _intResult;
        private string _stringResult;
        private string _errorResult;

        [MenuItem("Etermax/PlayerPrefs/Open")]
        public static void Open() {
            GetWindow<PlayerPrefsEditorWindow>(true,"");
        }

        [MenuItem("Etermax/PlayerPrefs/Delete All")]
        public static void DeleteAll() {
            if (ShouldDeleteKey("Are you sure you want to delete all the keys?"))
                PlayerPrefs.DeleteAll();
        }

        private void OnGUI() {
            ComposedLayout.Header("PlayerPrefs Editor");
            Layout.VerticalBox(() => {
                Label.Bold("Key", Color.white);
                Layout.HorizontalWhiteBox(() => {
                    _keyText = GUILayout.TextArea(_keyText);
                    Button.SearchButton(SearchKey);
                    Button.TrashButton(DeleteKey);
                });
            });
            RenderMessage();
            RenderError();
        }

        private void SearchKey() {
            Reset();
            if (PlayerPrefs.HasKey(_keyText)) {
                GetKey();
                GetMessageResult();
            }
            else SetKeyNotFoundError();
        }

        private void Reset() {
            _errorResult = null;
            _intResult = 0;
            _stringResult = null;
            _floatResult = 0f;
            _messageResult = null;
        }

        private void GetKey() {
            _stringResult = PlayerPrefs.GetString(_keyText, null);
            _floatResult = PlayerPrefs.GetFloat(_keyText, float.MinValue);
            _intResult = PlayerPrefs.GetInt(_keyText, Int32.MinValue);
        }

        private void SetKeyNotFoundError() {
            _errorResult = "Key " + _keyText + " does not exists!";
        }

        private void GetMessageResult() {
            if (!string.IsNullOrEmpty(_stringResult))
                _messageResult = _stringResult;
            else if (!_floatResult.Equals(float.MinValue))
                _messageResult = _floatResult.ToString();
            else if (!_intResult.Equals(Int32.MinValue))
                _messageResult = _intResult.ToString();
        }

        private void DeleteKey() {
            if (!ShouldDeleteKey("Are you sure you want to delete " + _keyText + "?")) return;
            Reset();
            if (PlayerPrefs.HasKey(_keyText)) {
                PlayerPrefs.DeleteKey(_keyText);
                _messageResult = "Key " + _keyText + " was deleted!";
            }
            else SetKeyNotFoundError();
        }

        private static bool ShouldDeleteKey(string message) {
            return EditorUtility.DisplayDialog("Delete", message, "Yes, I'm sure", "No");
        }

        private void RenderError() {
            if (!string.IsNullOrEmpty(_errorResult))
                ComposedLayout.MessageBox(_errorResult, MessageType.Error);
        }

        private void RenderMessage() {
            if (!string.IsNullOrEmpty(_messageResult))
            {
                ComposedLayout.MessageBox(_messageResult, MessageType.None);
                Button.Custom("Copy to Clipboard", CopyMessageToClipboard);
            }
        }

        private void CopyMessageToClipboard()
        {
            TextEditor te = new TextEditor();
            te.text = _messageResult;
            te.SelectAll();
            te.Copy();
        }
    }
}