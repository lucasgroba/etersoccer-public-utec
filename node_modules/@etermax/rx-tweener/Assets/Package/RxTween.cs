using System;
using UniRx;
using UnityEngine;

namespace Etermax.Utilities.Rx
{
	public static class RxTween
	{
		static IObservable<float> time;
		
		public static IObservable<float> Make(float initialValue, float finalValue, float duration, Func<float, float> easing)
		{
			return TimeSinceTweenStart()
					.TakeWhile(currentTime => currentTime < duration)
					.Concat(Observable.Return(duration))
					.Select(currentTime => currentTime / duration)
					.Select(easing)
					.Select(easedProgress => ComputeValue(initialValue, finalValue, easedProgress));
		}

		public static IObservable<Vector3> Make(Vector3 initialValue, Vector3 finalValue, float duration, Func<float, float> easing)
		{
			return TimeSinceTweenStart()
					.TakeWhile(currentTime => currentTime < duration)
					.Concat(Observable.Return(duration))
					.Select(currentTime => currentTime / duration)
					.Select(easing)
					.Select(easedProgress => ComputeValue(initialValue, finalValue, easedProgress));
		}
	    
	    public static IObservable<Color> Make(Color initialValue, Color finalValue, float duration, Func<float, float> easing)
	    {
	        return TimeSinceTweenStart()
			        .TakeWhile(currentTime => currentTime < duration)
			        .Concat(Observable.Return(duration))
			        .Select(currentTime => currentTime / duration)
			        .Select(easing)
		            .Select(easedProgress => ComputeValue(initialValue, finalValue, easedProgress));
	    }

	    public static IObservable<float> BeginWith(float value, float timeSpan)
	    {
		    return Timer(timeSpan)
			    .Select(_ => value)
			    .StartWith(value);
	    }

	    public static IObservable<Vector3> BeginWith(Vector3 value, float timeSpan)
	    {
		    return Timer(timeSpan)
			    .Select(_ => value)
			    .StartWith(value);
	    }

	    public static IObservable<Color> BeginWith(Color color, float timeSpan)
	    {
		    return Timer(timeSpan)
			    .Select(_ => color)
			    .StartWith(color);
	    }

	    static IObservable<float> Timer(float timeSpan)
	    {
		    return TimeSinceTweenStart()
			    .TakeWhile(time => time < timeSpan)
			    .LastOrDefault();
	    }

	    static IObservable<float> TimeSinceTweenStart()
		{
			return Timeline()
				.Scan(0f, (accumulatedTime, timeSincePreviousUpdate) => accumulatedTime + timeSincePreviousUpdate);
		}

		static IObservable<float> Timeline()
		{
			return time ?? (time = CreateTimeline());
		}

		static IObservable<float> CreateTimeline()
		{
			return Observable.EveryUpdate()
				.Select(_ => Time.deltaTime)
				.Share();
		}

		static float ComputeValue(float initialValue, float finalValue, float progress)
		{
			return initialValue + (progress * (finalValue - initialValue));
		}
		
		static Vector3 ComputeValue(Vector3 initialValue, Vector3 finalValue, float progress)
		{
			return initialValue + (progress * (finalValue - initialValue));
		}
	    
	    static Color ComputeValue(Color initialValue, Color finalValue, float progress)
	    {
	        return initialValue + (progress * (finalValue - initialValue));
	    }
	}
}
