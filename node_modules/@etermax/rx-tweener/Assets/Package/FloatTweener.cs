using System;
using System.Linq;
using Etermax.Utilities.Rx;
using UniRx;
using UnityEngine;

namespace Etermax.Rx.UnityDelivery.Widgets {
    public abstract class FloatTweener : MonoBehaviour {
        public float from = 0f;
        public float to = 1f;
        public AnimationCurve curve = new AnimationCurve(new Keyframe(0f, 0f, 0f, 1f), new Keyframe(1f, 1f, 1f, 0f));
        public bool pingPong = false;
        public bool loop = false;
        public float startDelay;
        public float duration = 1f;
        public bool playOnAwake = true;
        public bool playNow = false;

        protected readonly CompositeDisposable playDisposable = new CompositeDisposable();
        protected bool isPlaying;

        protected IObservable<float> Tween() 
        {
            return RxTween.BeginWith(from, startDelay)
                .Concat(CreateTween())
                .TakeWhile(_ => isPlaying)
                .TakeUntilDestroy(this);
        }

        public static Func<float, float> CurveToFunction(AnimationCurve curve) 
        {
            var duration = curve.keys.Last().time;
            return t => curve.Evaluate(t * duration);
        }

        public IObservable<Unit> Play() 
        {
            isPlaying = true;
            return PlayTween();
        }

        public void PlayWithSubscription() 
        {
            playDisposable.Clear();
            playDisposable.Add(Play().Subscribe().AddTo(this));
        }

        public void Stop() 
        {
            isPlaying = false;
        }

        protected abstract IObservable<Unit> PlayTween();

        IObservable<float> CreateTween() 
        {
            var tween = RxTween.Make(from, to, duration, CurveToFunction(curve));
            var inverseTween = RxTween.Make(from, to, duration, t => CurveToFunction(curve)(1f - t));

            if (pingPong)
                tween = tween.Concat(inverseTween);

            if (loop)
                tween = tween.RepeatSafe();

            return tween;
        }


        void Awake() 
        {
            isPlaying = playOnAwake;

            if (playOnAwake)
                PlayWithSubscription();
        }

        void Update() 
        {
            if (playNow) {
                playNow = false;
                PlayWithSubscription();
            }
        }

        void OnDestroy() 
        {
            playDisposable.Clear();
        }
    }
}