using System;
using System.Collections.Generic;
using Etermax.Utilities.Rx;
using UniRx;
using UnityEngine;
using UnityEngine.UI;

namespace Etermax.Rx.UnityDelivery.Widgets 
{
    public class AlphaTweener : FloatTweener 
    {
        private IEnumerable<Graphic> uiElements;

        public void PlayReverse() 
        {
            playDisposable.Clear();
            playDisposable.Add(Observable.Defer(() => {
                    isPlaying = true;
                    return RxTween.BeginWith(to, startDelay)
                        .Concat( RxTween.Make(to, @from, duration, t => CurveToFunction(curve)(t)))
                        .TakeWhile(_ => isPlaying)
                        .TakeUntilDestroy(this)
                        .Do(SetAlpha)
                        .AsUnitObservable();
                })
                .ObserveOn(Scheduler.MainThread)
                .Subscribe()
                .AddTo(this));
        }

        protected override IObservable<Unit> PlayTween() 
        {
            return Tween()
                .Do(SetAlpha)
                .AsUnitObservable();
        }

        IEnumerable<Graphic> GetUIElements() 
        {
            if (uiElements == null)
                uiElements = GetComponents<Graphic>();
            return uiElements;
        }

        public void SetAlpha(float a) 
        {
            foreach (var uiElement in GetUIElements()) 
            {
                var color = uiElement.color;
                uiElement.color = new Color(color.r, color.g, color.b, a);
            }
        }
    }
}