using System;
using System.Linq;
using Etermax.Utilities.Rx;
using UniRx;
using UnityEngine;

namespace Etermax.Rx.UnityDelivery.Widgets {
	public abstract class ColorTweener : MonoBehaviour {
		public Color from = new Color(0.8f, 0.2f, 0.2f, 1f);
		public Color to = new Color(0.2f, 0.5f, 0.8f, 1f);
		public AnimationCurve curve = new AnimationCurve(new Keyframe(0f, 0f, 0f, 1f), new Keyframe(1f, 1f, 1f, 0f));
		public bool pingPong = false;
		public bool loop = false;
		public float startDelay;
		public float duration = 1f;
		public bool playOnAwake = true;
		public bool playNow = false;
		
		IDisposable _playDisposable;
		bool isPlaying;

		public IObservable<Color> Tween() {
			return RxTween.BeginWith(from, startDelay)
				.Concat(ComposeTween())
				.TakeWhile(_ => isPlaying)
				.TakeUntilDestroy(this);
		}

		public static Func<float, float> CurveToFunction(AnimationCurve curve) {
			var duration = curve.keys.Last().time;
			return t => curve.Evaluate(t * duration);
		}

		public IObservable<Unit> Play()
		{
			isPlaying = true;
			return PlayTween();
		}

		public void PlayWithSubscription()
		{
			_playDisposable = Play().Subscribe().AddTo(this);
		}

		public void Stop()
		{
			isPlaying = false;
		}

		protected abstract IObservable<Unit> PlayTween();

		IObservable<Color> ComposeTween() {
			var tween = RxTween.Make(from, to, duration, CurveToFunction(curve));
			var inverseTween = RxTween.Make(from, to, duration, t => CurveToFunction(curve)(1f - t));

			if (pingPong)
				tween = tween.Concat(inverseTween);

			if (loop)
				tween = tween.Repeat();

			return tween;
		}

		void Awake()
		{
			isPlaying = playOnAwake;

			if (playOnAwake)
				PlayWithSubscription();
		}

		void Update() {
			if (playNow) {
				playNow = false;
				PlayWithSubscription();
			}
		}

		void OnDestroy() {
			if (_playDisposable != null)
				_playDisposable.Dispose();
		}
	}
}