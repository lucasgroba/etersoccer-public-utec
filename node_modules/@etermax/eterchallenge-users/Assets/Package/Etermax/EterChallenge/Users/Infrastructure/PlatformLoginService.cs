using System;
using System.Collections.Generic;
using Etermax.Json;
using Etermax.Web.Client;
using Etermax.Web.Client.ReactiveExtensions;
using Package.Etermax.EterChallenge.Users.Domain;
using Package.Etermax.EterChallenge.Users.Domain.Errors;
using Package.Etermax.EterChallenge.Users.Extensions;
using UniRx;
using UnityEngine;

namespace Package.Etermax.EterChallenge.Users.Infrastructure
{
    public class PlatformLoginService : ILoginService
    {
        private const string Resource = "/games/:gameId/users/login";
        private readonly string _apiUrl;
        private readonly string _gameId;
        private readonly IWebClient _webClient;
        private readonly IScheduler _scheduler;


        public PlatformLoginService(string apiUrl, string gameId, IWebClient webClient, IScheduler scheduler = null)
        {
            if (scheduler == null)
                scheduler = Scheduler.ThreadPool;
            _scheduler = scheduler;
            _apiUrl = apiUrl;
            _gameId = gameId;
            _webClient = webClient;
        }

        public IObservable<User> Execute<T>(string userId, string provider, string providerId, T credentials,
            Dictionary<string, object> userMetadata = null)
        {
            return LoginRequestToJsonObject(userId, provider, providerId, credentials,
                    userMetadata ?? new Dictionary<string, object>())
                .SelectMany(payload => SendRequest(payload));
        }

        private IObservable<User> SendRequest(string payload)
        {
            return _webClient
                .Post(_apiUrl + Resource)
                .ReplacePathParam("gameId", _gameId)
                .Send(payload)
                .ThrowOn(HttpStatusCode.Unauthorized, error => new UnauthorizedException())
                .ObserveOn(_scheduler)
                .Select(response => response.BodyAsJsonObject.ToLoggedUser());
        }

        private static IObservable<string> LoginRequestToJsonObject<T>(string userId, string provider,
            string providerId, T credentials, Dictionary<string, object> userMetadata)
        {
            try
            {
                return Observable.Start(() => JsonObject.Create()
                    .Add("provider", provider)
                    .Add("providerUserId", providerId)
                    .Add("userId", userId)
                    .Add("credentials", credentials)
                    .Add("userMetadata", userMetadata)
                    .ToString());
            }
            catch (Exception e)
            {
                Debug.LogError(e.Message);
                throw;
            }
        }
    }
}