using System;
using Package.Etermax.EterChallenge.Users.Domain;
using UniRx;

namespace Package.Etermax.EterChallenge.Users.Actions
{
    public class LoginWithEmail
    {
        private readonly ILoginService _loginService;
        private readonly SessionManager _sessionManager;

        public LoginWithEmail(ILoginService loginService, SessionManager sessionManager)
        {
            _loginService = loginService;
            _sessionManager = sessionManager;
        }

        public virtual IObservable<User> Execute(string userId, string email, string password)
        {
            return CreateEmailCredentialWith(email, password)
                .SelectMany(credentials => LoginWith(userId, credentials));
        }

        private IObservable<User> LoginWith(string userId, EmailCredentials credentials)
        {
            return _loginService.Execute(userId, IdentityProviders.Email, credentials.Email, credentials)
                .DoOnError(_sessionManager.LoginError)
                .Do(user => _sessionManager.Login(user));
        }

        private IObservable<EmailCredentials> CreateEmailCredentialWith(string email, string password)
        {
            return Observable.Start(() => new EmailCredentials(email, password));
        }
    }
}