using System;
using Etermax.Json;
using Etermax.Web.Client;
using Etermax.Web.Client.ReactiveExtensions;
using Package.Etermax.EterChallenge.Users.Domain;
using Package.Etermax.EterChallenge.Users.Domain.Errors;
using Package.Etermax.EterChallenge.Users.Extensions;
using UniRx;

namespace Package.Etermax.EterChallenge.Users.Infrastructure
{
    public class PlatformLinkIdentityService : ILinkIdentityService
    {
        private const string LinkResource = "/games/:gameId/link";
        private readonly string _apiUrl;
        private readonly string _gameId;
        private readonly IWebClient _webClient;
        private readonly IScheduler _scheduler;

        public PlatformLinkIdentityService(string apiUrl, string gameId, IWebClient webClient,
            IScheduler scheduler = null)
        {
            if (scheduler == null)
                scheduler = Scheduler.ThreadPool;

            _scheduler = scheduler;
            _apiUrl = apiUrl;
            _gameId = gameId;
            _webClient = webClient;
        }

        public IObservable<User> Link<T>(string userId, string provider, string providerUserId, T credentials)
        {
            return CreatePayloadWith(userId, provider, providerUserId, credentials)
                .SelectMany(payload => SendRequestWith(payload));
        }

        private IObservable<User> SendRequestWith(string payload)
        {
            return _webClient
                .Post(_apiUrl + LinkResource)
                .ReplacePathParam("gameId", _gameId)
                .Send(payload)
                .ThrowOn(HttpStatusCode.Unauthorized, error => new UnauthorizedException())
                .ThrowOn(HttpStatusCode.Conflict, error => new IdentityAlreadyExists())
                .ObserveOn(_scheduler)
                .SelectMany(response => ToLinkAccountResponse(response));
        }

        private IObservable<string> CreatePayloadWith<T>(string userId, string provider, string providerUserId,
            T credentials)
        {
            return Observable.Start(() => JsonObject.Create()
                .Add("userId", userId)
                .Add("provider", provider)
                .Add("providerUserId", providerUserId)
                .Add("credentials", credentials).ToString());
        }

        private IObservable<User> ToLinkAccountResponse(HttpWebResponse response)
        {
            return Observable.Start(() => response.BodyAsJsonObject.ToLinkedUser());
        }
    }
}