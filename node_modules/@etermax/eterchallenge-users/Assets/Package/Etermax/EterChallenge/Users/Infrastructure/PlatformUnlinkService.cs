using System;
using Etermax.Json;
using Etermax.Web.Client;
using Package.Etermax.EterChallenge.Users.Domain;
using Package.Etermax.EterChallenge.Users.Extensions;
using UniRx;

namespace Package.Etermax.EterChallenge.Users.Infrastructure
{
    public class PlatformUnlinkService : IUnlinkIdentityService
    {
        private const string Resource = "/games/:gameId/unlink";
        private readonly string _apiUrl;
        private readonly string _gameId;
        private readonly IWebClient _webClient;
        private readonly IScheduler _scheduler;

        public PlatformUnlinkService(string apiUrl, string gameId, IWebClient webClient, IScheduler scheduler = null)
        {
            if (scheduler == null)
                scheduler = Scheduler.ThreadPool;

            _scheduler = scheduler;
            _apiUrl = apiUrl;
            _gameId = gameId;
            _webClient = webClient;
        }

        public IObservable<User> Execute(string userId, string provider, string providerUserId)
        {
            return CreatePayloadWith(userId, provider, providerUserId)
                .SelectMany(payload => SendRequest(payload));
        }

        private IObservable<User> SendRequest(string payload)
        {
            return _webClient
                .Post(_apiUrl + Resource)
                .ReplacePathParam("gameId", _gameId)
                .Send(payload)
                .ObserveOn(_scheduler)
                .Select(response => response.BodyAsJsonObject.ToUnlinkedUser());
        }

        private IObservable<string> CreatePayloadWith(string userId, string provider, string providerUserId)
        {
            return Observable.Start(() => JsonObject
                .Create()
                .Add("userId", userId)
                .Add("provider", provider)
                .Add("providerUserId", providerUserId).ToString());
        }
    }
}