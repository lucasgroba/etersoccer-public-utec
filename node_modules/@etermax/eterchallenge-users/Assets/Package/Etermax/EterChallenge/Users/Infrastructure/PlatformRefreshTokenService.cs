using System;
using Etermax.Web.Client;
using Package.Etermax.EterChallenge.Users.Domain;
using UniRx;

namespace Package.Etermax.EterChallenge.Users.Infrastructure
{
    public class PlatformRefreshTokenService : IRefreshTokenService
    {
        private readonly string _apiUrl;
        private readonly string _gameId;
        private readonly IWebClient _webClient;
        private readonly IScheduler _scheduler;

        private const string RefreshTokenResource = "/games/:gameId/users/:userId/tokens";

        public PlatformRefreshTokenService(string apiUrl, string gameId, IWebClient webClient,
            IScheduler scheduler = null)
        {
            if (scheduler == null)
                scheduler = Scheduler.ThreadPool;

            _scheduler = scheduler;
            _apiUrl = apiUrl;
            _gameId = gameId;
            _webClient = webClient;
        }

        public IObservable<Credentials> Refresh(string userId, string refreshToken)
        {
            return _webClient.Post(_apiUrl + RefreshTokenResource)
                .ReplacePathParam(":userId", userId)
                .ReplacePathParam(":gameId", _gameId)
                .AddBearerAuthentication(refreshToken)
                .Send()
                .ObserveOn(_scheduler)
                .Select(ParseResponse);
        }

        private Credentials ParseResponse(HttpWebResponse httpWebResponse)
        {
            var json = httpWebResponse.BodyAsJsonObject;
            return new Credentials(json.GetString("token"), json.GetString("refreshToken"));
        }
    }
}