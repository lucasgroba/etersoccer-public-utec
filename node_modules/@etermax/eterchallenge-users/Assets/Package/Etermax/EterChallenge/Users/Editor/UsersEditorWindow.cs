using System.Collections;
using Etermax.Platform;
using Package.Etermax.EterChallenge.Users.Domain;
using Package.Etermax.EterChallenge.Users.Domain.Errors;
using UniRx;
using UnityEditor;
using UnityEditorLayoutWrapper.Components;
using UnityEngine;
using ILogger = Etermax.Web.Client.Loggers.ILogger;

namespace Package.Etermax.EterChallenge.Users.Editor
{
    public class UsersEditorWindow
    {
        [MenuItem("Etermax/Platform Services/Users/Open")]
        public static void CreateLoginAccount()
        {
            EditorWindow.GetWindow<CreateUserEditorWindow>(true, "Platform Services Users");
        }
    }

    public class CreateUserEditorWindow : EditorWindow
    {
        private static string usersUrl = "https://api.platform-staging.etermax.com/games/";
        private static string platformUrl = "https://api.platform-staging.etermax.com";
        private static string _gameId = "YOUR_GAME_ID";
        private const string GameIdKey = "Etermax.Platform.Users.Editor.GameId";
        private Texture _profilePicture;
        private bool _loadingUser;
        private string _email = "";
        private string _password = "";
        private const int MIN_LABEL_WIDTH = 100;
        private PlatformServices _platformServices;
        private SessionManager _sessionManager;

        private void OnEnable()
        {
            _sessionManager = SessionManager.Default;

            if (SessionManager.Default.HasUser())
            {
                Observable.FromCoroutine(GetProfilePicture).Subscribe();
            }

            _gameId = PlayerPrefs.GetString(GameIdKey);


            if (string.IsNullOrEmpty(_gameId))
            {
                _gameId = "YOUR_GAME_ID";
            }
            else
            {
                _platformServices = GetPlatformServices();
            }

            _sessionManager.OnLogin
                .ObserveOnMainThread()
                .Subscribe(user => Debug.Log("Login Succeed. Welcome " + user.Profile.Name));

            _sessionManager.OnLogout
                .ObserveOnMainThread()
                .Subscribe(_ => Debug.Log("Logout Succeed."));
        }

        IEnumerator GetProfilePicture()
        {
            var www = new WWW(_sessionManager.User.Profile.PictureUrl);
            yield return www;
            _profilePicture = www.texture;
        }

        private void OnGUI()
        {
            ComposedLayout.Header("User");
            GUI.enabled = !_loadingUser;

            if (_gameId == "YOUR_GAME_ID")
            {
                WithOutAlreadyLoggedUser();
            }
            else
            {
                if (_gameId != "YOUR_GAME_ID" && _sessionManager.HasUser() && _sessionManager.IsAuthenticated())
                {
                    WithAlreadyLoggedUser();
                }
                else
                {
                    WithOutAlreadyLoggedUser();
                }
            }
        }

        void WithAlreadyLoggedUser()
        {
            Layout.VerticalHelpbox(() =>
            {
                Layout.VerticalWhiteBox(() =>
                {
                    Layout.Horizontal(() =>
                    {
                        GUILayout.Label(_profilePicture, GUILayout.MaxWidth(55), GUILayout.MaxHeight(55));
                        Layout.Vertical(() =>
                        {
                            Layout.HorizontalBox(() => Label.Bold("Id", Color.white));
                            GUILayout.TextArea(_sessionManager.UserId);
                        });
                    });

                    Layout.HorizontalBox(() => Label.Bold("Profile", Color.white));
                    Layout.Horizontal(() =>
                    {
                        Label.Bold("Name:", Color.black, GUILayout.MinWidth(MIN_LABEL_WIDTH));
                        GUILayout.TextArea(_sessionManager.User.Profile.Name);
                    });
                    Layout.Horizontal(() =>
                    {
                        Label.Bold("Country:", Color.black, GUILayout.MinWidth(MIN_LABEL_WIDTH));
                        GUILayout.TextArea(_sessionManager.User.Profile.Country);
                    });

                    Layout.Horizontal(() =>
                    {
                        Label.Bold("Gender:", Color.black, GUILayout.MinWidth(MIN_LABEL_WIDTH));
                        GUILayout.TextArea(_sessionManager.User.Profile.Gender);
                    });
                    Layout.Horizontal(() =>
                    {
                        Label.Bold("Picture Url:", Color.black, GUILayout.MinWidth(MIN_LABEL_WIDTH));
                        GUILayout.TextArea(_sessionManager.User.Profile.PictureUrl);
                    });

                    Layout.HorizontalBox(() => Label.Bold("Identities", Color.white));
                    foreach (var identity in _sessionManager.User.Identities)
                    {
                        Layout.VerticalWhiteBox(() =>
                        {
                            Layout.Horizontal(() =>
                            {
                                Label.Bold("Game Id:", Color.black, GUILayout.MinWidth(MIN_LABEL_WIDTH));
                                GUILayout.TextArea(_gameId);
                            });
                            Layout.Horizontal(() =>
                            {
                                Label.Bold("Provider:", Color.black, GUILayout.MinWidth(MIN_LABEL_WIDTH));
                                GUILayout.TextArea(identity.Provider);
                            });
                            Layout.Horizontal(() =>
                            {
                                Label.Bold("Provider User Id:", Color.black, GUILayout.MinWidth(MIN_LABEL_WIDTH));
                                GUILayout.TextArea(identity.Id);
                            });
                        });
                    }

                    Layout.HorizontalBox(() => Label.Bold("Access Token", Color.white));
                    GUILayout.TextArea(_sessionManager.User.Credentials.AccessToken);
                    Layout.HorizontalBox(() => Label.Bold("Refresh Token", Color.white));
                    GUILayout.TextArea(_sessionManager.User.Credentials.RefreshToken);
                });
            });

            Button.Custom("Log out", () =>
            {
                if (_platformServices == null)
                    _platformServices = GetPlatformServices();

                _platformServices.Users()
                    .Logout().Execute()
                    .ObserveOnMainThread()
                    .Subscribe();
            });
        }

        void WithOutAlreadyLoggedUser()
        {
            if (!_sessionManager.HasUser())
            {
                Layout.HorizontalBox(() => Label.Bold("Users URL", Color.white));
                Layout.Horizontal(() =>
                {
                    Label.Custom(usersUrl, Color.gray);
                    _gameId = GUILayout.TextField(_gameId);
                });

                Button.Custom("Get User", () =>
                {
                    PlayerPrefs.SetString(GameIdKey, _gameId);
                    GetPlatformServices().Users().CreateUser().Execute()
                        .ObserveOnMainThread()
                        .DoOnSubscribe(() => _loadingUser = true)
                        .DoOnTerminate(() => _loadingUser = false)
                        .Subscribe();
                });
            }
            else
            {
                Layout.VerticalHelpbox(() =>
                {
                    Layout.HorizontalBox(() => Label.Bold("Users URL", Color.white));
                    Layout.Horizontal(() =>
                    {
                        Label.Custom(usersUrl, Color.gray);
                        _gameId = GUILayout.TextField(_gameId);
                    });


                    Layout.VerticalHelpbox(() => { EmailLoginRender(); });
                });

                if (_loadingUser)
                {
                    GUILayout.Label("Loading user profile... Please wait");
                }
            }
        }

        private void EmailLoginRender()
        {
            Layout.HorizontalBox(() => Label.Bold("Email", Color.white));

            Label.Custom("Email:", Color.black);
            _email = GUILayout.TextField(_email);

            Label.Custom("Password:", Color.black);
            _password = GUILayout.PasswordField(_password, '*');

            GUILayout.Space(10);

            GUI.enabled = EmailLoginButtonEnabled();
            Button.Custom("Log in", LoginWithEmail);

            GUI.enabled = true;
        }

        private bool EmailLoginButtonEnabled()
        {
            return !string.IsNullOrEmpty(_gameId) && _gameId != "GAME_ID" &&
                   !string.IsNullOrEmpty(_email) &&
                   !_loadingUser;
        }

        private static PlatformServices GetPlatformServices()
        {
            return PlatformServices.With(platformUrl, _gameId, GetEditorWebClient());
        }

        private void LoginWithEmail()
        {
            PlayerPrefs.SetString(GameIdKey, _gameId);
            _platformServices = GetPlatformServices();

            var loginWithEmail = _platformServices.Users().LoginWithEmail();


            loginWithEmail.Execute(_sessionManager.UserId, _email, _password)
                .DoOnSubscribe(() => _loadingUser = true)
                .DoOnTerminate(() => _loadingUser = false)
                .ObserveOnMainThread()
                .Subscribe(user =>
                    {
                        OnEnable();
                        Repaint();
                    },
                    exception =>
                    {
                        Debug.LogError(exception is UnauthorizedException ? "Invalid Credentials" : exception.Message);
                    });
            ;
        }

        private static ReactiveEditorWebClient GetEditorWebClient()
        {
            return ReactiveEditorWebClient.Create(new EditorWebLogger());
        }
    }

    class EditorWebLogger : ILogger
    {
        public void Write(string tag, string message)
        {
            Debug.Log(tag + message);
        }
    }
}