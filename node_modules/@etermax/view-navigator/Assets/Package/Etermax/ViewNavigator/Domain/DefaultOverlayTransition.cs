using System;
using System.Collections.Generic;
using System.Linq;
using Etermax.Utilities.Rx;
using Functional.Maybe;
using UniRx;
using UnityEngine;
using UnityEngine.UI;
using Object = UnityEngine.Object;

namespace Etermax.ViewNavigator.Domain
{
    public class DefaultOverlayTransition : IOverlayTransition
    {
        private const float InitialValue = 0;
        private const float MaxOverlayValue = 0.8f;
        private const float OverlayTransitionTime = 0.1f;
        private static Image overlayImage;
        private static readonly HashSet<string> CurrentOverlayViews = new HashSet<string>();
        private static readonly CompositeDisposable FadeOutDisposables = new CompositeDisposable();
        
        private readonly float _animationDuration;
        private readonly Vector3 _leftOutsidePosition;
        private readonly Vector3 _rightOutsidePosition;
        private readonly Vector3 _centralPosition;

        public DefaultOverlayTransition() {
            
        }
        
        public DefaultOverlayTransition(float height, float animationDuration)
        {
            _animationDuration = animationDuration;
            _leftOutsidePosition = new Vector3(0, height, 0);
            _rightOutsidePosition = new Vector3(0, -height, 0);
            _centralPosition = Vector3.zero;
        }
        
        public void In(GameObject @from, GameObject to, Action onStart, Action onComplete)
        {
            to.transform.localPosition = _rightOutsidePosition;
            to.transform.SetAsLastSibling();

            onStart();

            Move(@to, _rightOutsidePosition, _centralPosition, onComplete);
        }

        public void Out(GameObject @from, GameObject to, Action onStart, Action onComplete)
        {
            Debug.Log("Starting transition");

            onStart();

            Move(@from, _centralPosition, _rightOutsidePosition, onComplete);
        }


        private void Move(GameObject gameObject, Vector3 from, Vector3 to, Action onComplete)
        {
            RxTween.Make(from, to, _animationDuration, (a) => 1f * a)
                .Subscribe(position => { gameObject.transform.localPosition = position; }, exception => { },
                    onComplete);
        }

        public IObservable<Unit> FadeInBackground(string viewGuid, Transform parentTransform) {
            return Observable.Create<Unit>(emitter => {
                PreventRaceCondition();

                var disposable = Disposable.Empty;

                if (overlayImage != null) {
                    CurrentOverlayViews.Add(viewGuid);
                    overlayImage.transform.SetSiblingIndex(parentTransform.GetSiblingIndex());
                    emitter.OnCompleted();
                }
                else {
                    CurrentOverlayViews.Add(viewGuid);
                    var overlayGameObject = new GameObject("_OverlayBackgroundTransition");
                    overlayImage = overlayGameObject.AddComponent<Image>();
                    overlayImage.color = new Color(0, 0, 0, 0);
                    overlayGameObject.transform.SetParent(parentTransform, false);
                    overlayGameObject.transform.SetAsLastSibling();
                    overlayGameObject.Stretch();
                    disposable = RxTween.Make(InitialValue, MaxOverlayValue, OverlayTransitionTime, f => f * 1)
                        .Subscribe(alphaValue => overlayImage.color = new Color(0, 0, 0, alphaValue), emitter.OnCompleted);
                }

                return disposable;
            });
        }

        public IObservable<Unit> FadeOutBackground() {
            return Observable.Create<Unit>(emitter => {
                var disposable = Disposable.Empty;
                if (overlayImage == null) {
                    CurrentOverlayViews.Clear();
                    emitter.OnCompleted();
                }
                else {
                    CurrentOverlayViews.LastOrDefault()
                        .ToMaybe()
                        .Do(last => {
                            CurrentOverlayViews.Remove(last);

                            if (!CurrentOverlayViews.Any()) {
                                disposable = RxTween.Make(MaxOverlayValue, InitialValue, OverlayTransitionTime, f => f * 1)
                                    .Subscribe(alphaValue => overlayImage.color = new Color(0, 0, 0, alphaValue),
                                        () => {
                                            Object.Destroy(overlayImage.gameObject);
                                            overlayImage = null;
                                            emitter.OnCompleted();
                                        });

                                FadeOutDisposables.Add(disposable);
                            }
                            else {
                                var newSiblingIndex = Mathf.Max(0, overlayImage.transform.GetSiblingIndex() - 1);
                                overlayImage.transform.SetSiblingIndex(newSiblingIndex);
                                emitter.OnCompleted();
                            }
                        })
                        .DoWhenAbsent(emitter.OnCompleted);
                }
                return disposable;
            });
        }

        private static void PreventRaceCondition() {
            if (!CurrentOverlayViews.Any()) {
                FadeOutDisposables.Clear();

                if (overlayImage != null) {
                    Object.Destroy(overlayImage.gameObject);
                    overlayImage = null;
                }
            }
        }
    }
}