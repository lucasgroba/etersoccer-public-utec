using System;
using Etermax.Utilities.Rx;
using UniRx;
using UnityEngine;

namespace Etermax.ViewNavigator.Domain
{
    public class DefaultNavigationTransition : ITransition
    {
        private readonly float _animationDuration;
        private readonly Vector3 _leftOutsidePosition;
        private readonly Vector3 _rightOutsidePosition;
        private readonly Vector3 _centralPosition;

        public DefaultNavigationTransition(float width, float animationDuration)
        {
            _animationDuration = animationDuration;
            _leftOutsidePosition = new Vector3(-width, 0, 0);
            _rightOutsidePosition = new Vector3(width, 0, 0);
            _centralPosition = Vector3.zero;
        }

        public void In(GameObject @from, GameObject to, Action onStart, Action onComplete)
        {      
            to.transform.localPosition = _rightOutsidePosition;
            to.transform.SetAsLastSibling();
            onStart();

            Move(@from, _centralPosition, _leftOutsidePosition, () => { });
            Move(@to, _rightOutsidePosition, _centralPosition, onComplete);
        }

        public void Out(GameObject @from, GameObject to, Action onStart, Action onComplete)
        {
            to.transform.localPosition = _leftOutsidePosition;
            to.transform.SetAsLastSibling();
            onStart();

            Move(@from, _centralPosition, _rightOutsidePosition, () => { });
            Move(@to, _leftOutsidePosition, _centralPosition, onComplete);
        }


        private void Move(GameObject gameObject, Vector3 from, Vector3 to, Action onComplete)
        {
            RxTween.Make(from, to, _animationDuration, (a) => 1f * a)
                .Subscribe(_ => { gameObject.transform.localPosition = _; }, exception => { },
                    onComplete);
        }
    }
}