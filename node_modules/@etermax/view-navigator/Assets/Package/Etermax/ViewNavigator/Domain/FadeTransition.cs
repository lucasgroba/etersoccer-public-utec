using System;
using Etermax.Utilities.Rx;
using UniRx;
using UnityEngine;

namespace Etermax.ViewNavigator.Domain {
	public class FadeTransition : ITransition {
		private readonly float _animationDuration;

		public FadeTransition(float animationDuration) {
			_animationDuration = animationDuration;
		}

		public void In(GameObject @from, GameObject to, Action onStart, Action onComplete) {
			onStart();

			var canvasGroupFrom = @from.GetComponent<CanvasGroup>();
			var canvasGroupTo = to.GetComponent<CanvasGroup>();

			canvasGroupFrom.alpha = 1;
			canvasGroupTo.alpha = 0;

			RxTween.Make(0, 1, _animationDuration, (a) => 1f * a)
				.Subscribe(_ => canvasGroupTo.alpha = _, exception => { }, onComplete);

			RxTween.Make(1, 0, _animationDuration, (a) => 1f * a)
				.Subscribe(alpha => canvasGroupFrom.alpha = alpha
					, exception => { }, () => { });
		}

		public void Out(GameObject @from, GameObject to, Action onStart, Action onComplete) {
			var canvasGroupFrom = @from.GetComponent<CanvasGroup>();
			var canvasGroupTo = to.GetComponent<CanvasGroup>();

			RxTween.Make(0, 1000, _animationDuration, (a) => 1 / 1000f * a)
				.Subscribe(_ => canvasGroupTo.alpha = _, exception => { }, onComplete);

			RxTween.Make(1000, 0, _animationDuration, (a) => 1f * a)
				.Subscribe(_ => canvasGroupFrom.alpha = _, exception => { }, () => { });
		}
	}
}