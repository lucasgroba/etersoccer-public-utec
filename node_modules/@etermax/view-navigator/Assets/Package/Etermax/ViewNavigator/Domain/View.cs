using System;
using UnityEngine;

namespace Etermax.ViewNavigator.Domain
{
    public abstract class View : MonoBehaviour
    {
        protected Navigator navigator;
        
        public abstract void DoLoad();
        public abstract void DoAppear();
        public abstract void DoDisappear();
        public abstract void DoShownOverlay();
        public abstract void DoDismissedOverlay();
        public abstract void DoUnload();
        public abstract void DoLoadInnerViews();

        // Side effect callbacks
        public abstract void DoOnLoad(Action<View> action);
        public abstract void DoOnUnLoad(Action<View> action);
        public abstract void DoOnAppear(Action<View> action);
        public abstract void DoOnDisappear(Action<View> action);
        public abstract void DoOnDismissOverlay(Action<View> action);
        public abstract void DoOnShowOverlay(Action<View> action);

        public abstract void ClearDoOnLoad();
        public abstract void ClearDoOnUnLoad();
        public abstract void ClearDoOnAppear();
        public abstract void ClearDoOnDisappear();
        public abstract void ClearDoOnDismissOverlay();
        public abstract void ClearDoOnShowOverlay();

        public abstract void ClearAllLifecycleSideEffect();

        public virtual ITransition GetTransition()
        {
            return null;
        }

        public virtual IOverlayTransition GetOverlayTransition()
        {
            return null;
        }
        


        public void SetNavigator(Navigator theNavigator)
        {
            this.navigator = theNavigator;
        }
        

        public bool HasNavigator()
        {
            return navigator != null;
        }
    }
}