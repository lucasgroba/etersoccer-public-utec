using System;
using System.Collections.Generic;
using Etermax.ViewNavigator.Infrastructure;
using UniRx;
using UnityEngine;

namespace Etermax.ViewNavigator.Domain {
	public class TabBar : UnityView {
		public GameObject viewContainer;
		public GameObject tabBarButtonsContainer;
		public int defaultTab = 0;
		public List<View> tabViews;
		public List<TabBarButton> tabBarButtonsPrefabs;
		
		private List<Navigator> _innerNavigators = new List<Navigator>();
		private List<TabBarButton> _tabBarButtons = new List<TabBarButton>();
		private readonly FadeTransition _transition = new FadeTransition(0.35f);
		private Navigator _currentInnerNavigator;
		private TabBarButton _currentTabBarButton;

		protected override void DidLoad() {
			CreateInnerNavigators();
			CreateTabBarButtons();
			
			ValidateNumberOfTabBarButtonsAndViews();			
			ValidateDefaultTabValueWithTabBarButtonsQuantity();

			StartDefaultNavigation();
			ActiveDefaultTabBarButton();
		}

		private void ActiveDefaultTabBarButton() {
			SetAsCurrentTabBarButton(_tabBarButtons[defaultTab]);
		}

		public Navigator GetNavigatorFromTab(int index) {
			Debug.Log(_innerNavigators.Count);
			if (index >= _innerNavigators.Count)
				throw new Exception("Index " + index + " is greater than the number of TabBar Buttons");
			
			return _innerNavigators[index];
		}

    	public View CurrentViewInTabBar()
		{
			return _currentInnerNavigator.CurrentView;
		}
		
		private void StartDefaultNavigation() {
			_innerNavigators.ForEach(innerNavigator => {
				innerNavigator.IsVisible = false;
				innerNavigator.DoLoadInnerViews();
				innerNavigator.DoLoad();
			});
			
			_currentInnerNavigator = _innerNavigators[defaultTab];
			_currentInnerNavigator.IsVisible = true;
			_currentInnerNavigator.gameObject.SetActive(true);
		}

		private void ValidateDefaultTabValueWithTabBarButtonsQuantity() {
			if (defaultTab >= _tabBarButtons.Count)
				throw new Exception("The Default Tab is greater than the number of TabBar Buttons you have. Please set DefaultTab variable to a lower number.");
		}

		private void ValidateNumberOfTabBarButtonsAndViews() {
			if (_innerNavigators.Count != _tabBarButtons.Count)
				throw new Exception(
					"The number of TabBar Buttons and Views defer. Quantity of TabBar Buttons must be exactly the same to Views.");
		}

		private void CreateInnerNavigators() {
			_currentInnerNavigator = null;
			_innerNavigators = new List<Navigator>();
			foreach (var tab in tabViews) {
				var instantiateView = InstantiateView(tab);
				_innerNavigators.Add(instantiateView);
				instantiateView.SetNavigator(navigator);
			}
		}
		
		private void CreateTabBarButtons() {
			_tabBarButtons = new List<TabBarButton>();
			_currentTabBarButton = null;
			foreach (var buttonPrefab in tabBarButtonsPrefabs) {
				var instantiateDockButton = InstantiateTabBarButtons(buttonPrefab);
				_tabBarButtons.Add(instantiateDockButton);
			}
		}
		
		private Navigator InstantiateView(View prefab) {
			var newView = Instantiate(prefab, ViewNavigatorUtilities.GetOrInstantiateCanvas().transform);
			newView.DoOnUnLoad(view => Destroy(view.gameObject));
			return Navigator.Create(newView, (RectTransform) viewContainer.transform);
		}

		private TabBarButton InstantiateTabBarButtons(TabBarButton prefab) {
			return Instantiate(prefab, (RectTransform) tabBarButtonsContainer.transform);
		}

		protected override void DidAppear() {			
			RegisterTabBarButtons();
			_currentInnerNavigator.DoAppear();
			_currentTabBarButton.Activate();
		}

		private void RegisterTabBarButtons() {
			for (var i = 0; i < tabBarButtonsPrefabs.Count; i++) {
				var selectedIndex = i;
				var tabBarButton = _tabBarButtons[i];
				RegisterLifeCycleSubscriptions(tabBarButton.OnClick().Subscribe(_ => NavigateToIndex(selectedIndex)));
			}
		}

		public void NavigateToIndex(int index) {
			if (_currentInnerNavigator == _innerNavigators[index]) return;			
			SetAsCurrentTabBarButton(_tabBarButtons[index]);			
			DoTransitionBetween(_currentInnerNavigator, _innerNavigators[index]);
		}

		private void SetAsCurrentTabBarButton(TabBarButton tabBarButton) {
			if (_currentTabBarButton != null)
				_currentTabBarButton.Deactivate();
			_currentTabBarButton = tabBarButton;
			_currentTabBarButton.Activate();
		}

		private void DoTransitionBetween(Navigator currentView, Navigator targetView) {
			_transition.In(currentView.gameObject, targetView.gameObject, () => {
				targetView.gameObject.SetActive(true);
				currentView.DoDisappear();
				currentView.IsVisible = false;
			}, () => {
				currentView.gameObject.SetActive(false);
				targetView.DoAppear();
				_currentInnerNavigator = targetView;
				_currentInnerNavigator.IsVisible = true;
			});
		}

		protected override void DidShowOverlay() {
			_currentInnerNavigator.DoShownOverlay();
		}

		protected override void DidDismissOverlay() {
			_currentInnerNavigator.DoDismissedOverlay();
		}

		protected override void WillDisappear() {
			
			_currentInnerNavigator.DoDisappear();
		}

		protected override void DidUnload() {
			DestroyInnerNavigators();
			DestroyTabBarButtons();
		}

		private void DestroyInnerNavigators() {
			for (var i = 0; i < _innerNavigators.Count; i++) {
				_innerNavigators[i].DoUnload();			
			}
		}

		private void DestroyTabBarButtons() {
			for (var i = 0; i < _tabBarButtons.Count; i++) {
				Destroy(_tabBarButtons[i].gameObject);
			}
		}
	}
}