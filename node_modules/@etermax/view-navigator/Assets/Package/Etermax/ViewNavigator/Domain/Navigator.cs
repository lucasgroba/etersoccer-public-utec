using System;
using System.Collections.Generic;
using Etermax.ViewNavigator.Infrastructure;
using Functional.Maybe;
using UniRx;
using UnityEngine;

namespace Etermax.ViewNavigator.Domain
{
    public class Navigator : View
    {
        private readonly Stack<View> _viewStack = new Stack<View>();
        private Action _doWhenBackOnEmptyStack = () => { };
        private float _animationDuration = 1f;
        private float _width;
        private float _height;
        private ITransition _navigationTransition;
        private IOverlayTransition _overlayTransition;
        private Maybe<IOverlayTransition> _lastOverlayTransition;
        
        private Maybe<Transform> _overlayParentTransform = Maybe<Transform>.Nothing;
        private bool _isVisible = true;
        
        public Navigator Parent
        {
            get { return navigator; }
        }

        public static Builder WithRootView(View rootView)
        {
            return new Builder().RootView(rootView);
        }

        [Obsolete("Create is deprecated, please use WithRootView (Navigator builder) instead.")]
        public static Navigator Create(View rootView,
            RectTransform parentTransform = null,
            string name = "",
            ITransition defaultNavigationTransition = null,
            IOverlayTransition defaultOverlayTransition = null,
            Action doWhenBackOnEmptyStack = null,
            Transform overlayParentTransform = null,
            Canvas canvas = null
            )
        {
            
            var canvasTransform = (RectTransform)(canvas ? canvas : ViewNavigatorUtilities.GetOrInstantiateCanvas()).transform;
            var parent = parentTransform;
            if (parentTransform == null)
            {
                parent = canvasTransform;
            }

            var go = new GameObject(name + "Navigator", typeof(RectTransform));
            go.AddComponent<CanvasGroup>();

            go.transform.SetParent(parent, false);
            go.ScaleOne();
            go.Stretch();
            var unityNavigator = go.AddComponent<Navigator>();
            unityNavigator._overlayParentTransform = overlayParentTransform.ToMaybe();
            
            if (defaultOverlayTransition != null && defaultNavigationTransition != null)
            {
                unityNavigator._navigationTransition = defaultNavigationTransition;
                unityNavigator._overlayTransition = defaultOverlayTransition;
            }
            else
            {
                // TODO: Hmm take a look to this and try to make it better
                var sizeDelta = canvasTransform.sizeDelta;
                Observable.Timer(TimeSpan.FromMilliseconds(100)).Subscribe(_ =>
                {
                    sizeDelta = canvasTransform.sizeDelta;
                    unityNavigator.ConfigureDefaultTransitions(sizeDelta.x, sizeDelta.y, 0.2f);
                });

                unityNavigator.ConfigureDefaultTransitions(sizeDelta.x, sizeDelta.y, 0.2f);
            }

            unityNavigator.SetRootView(rootView);
            go.SetActive(false);

            if (doWhenBackOnEmptyStack != null)
                unityNavigator._doWhenBackOnEmptyStack = doWhenBackOnEmptyStack;
            return unityNavigator;
        }

        private void SetRootView(View rootView)
        {
            _viewStack.Push(rootView);
            var viewTransform = rootView.transform;
            viewTransform.SetParent(transform);
            viewTransform.gameObject.ScaleOne();
            rootView.gameObject.Stretch();
            rootView.gameObject.SetActive(true);
            rootView.SetNavigator(this);
        }

        public void SetStack(params View[] views)
        {
            Clear();
            foreach (var view in views)
            {
                var viewTransform = view.transform;
                viewTransform.SetParent(transform);
                view.gameObject.Stretch();

                _viewStack.Push(view);
                view.SetNavigator(this);
                view.DoLoad();
            }

            var currentView = _viewStack.Peek();
            currentView.gameObject.SetActive(true);
            currentView.DoAppear();
        }

        public override void DoLoad()
        {
            _viewStack.Peek().DoLoad();
        }

        public override void DoAppear()
        {
            _viewStack.Peek().DoAppear();
        }

        public override void DoDisappear()
        {
            _viewStack.Peek().DoDisappear();
        }

        public override void DoShownOverlay()
        {
            _viewStack.Peek().DoShownOverlay();
        }

        public override void DoDismissedOverlay()
        {
            _viewStack.Peek().DoDismissedOverlay();
        }

        public override void DoUnload()
        {
            var currentView = _viewStack.Pop();
            currentView.gameObject.SetActive(false);
            currentView.DoUnload();
            navigator = null;
            gameObject.transform.DetachChildren();
            Destroy(gameObject);
        }

        public override void DoLoadInnerViews() {  
            _viewStack.Peek().DoLoadInnerViews();                      
        }

        public void PushView(View view, ITransition transition = null)
        {
            if (view.HasNavigator())
                throw new InvalidOperationException("Cannot navigate to a view instance that already has a navigator");

            var currentView = _viewStack.Peek();
            currentView.DoDisappear();

            var viewTransform = view.transform;
            viewTransform.SetParent(transform);
            viewTransform.gameObject.ScaleOne();
            view.gameObject.Stretch();
            _viewStack.Push(view);
            view.SetNavigator(this);
            view.DoLoadInnerViews();
            view.DoLoad();

            var currentTransition = transition ?? view.GetTransition() ?? _navigationTransition;
            currentTransition.In(currentView.gameObject, view.gameObject,
                () => { view.gameObject.SetActive(true); },
                () =>
                {
                    if (_isVisible)
                        view.DoAppear();
                    
                    currentView.gameObject.SetActive(false);
                });
        }

        public void RestartNavigation(View view, ITransition transition = null)
        {
            MakeCurrentViewRoot();
            ReplaceView(view, transition);
        }

        public void PopToRootView(ITransition transition = null)
        {
            if (_viewStack.Count == 1)
                return;

            var tempView = _viewStack.Pop();
            while (_viewStack.Count > 1)
            {
                var currentView = _viewStack.Pop();
                currentView.transform.SetParent(null);
                currentView.DoDisappear();
                currentView.DoUnload();
            }

            _viewStack.Push(tempView);
            PopView(transition);
        }

        public void MakeCurrentViewRoot()
        {
            if (_viewStack.Count == 1)
                return;

            var tempView = _viewStack.Pop();
            while (_viewStack.Count > 0)
            {
                var currentView = _viewStack.Pop();
                currentView.transform.SetParent(null);
                currentView.DoDisappear();
                currentView.DoUnload();
            }

            _viewStack.Push(tempView);
        }

        public void Clear()
        {
            _lastOverlayTransition = Maybe<IOverlayTransition>.Nothing;
            while (_viewStack.Count > 0)
            {
                var currentView = _viewStack.Pop();
                currentView.transform.SetParent(null);
                currentView.DoDisappear();
                currentView.DoUnload();
            }
        }

        public void ReplaceView(View view, ITransition transition = null) 
        {
            var prevTransition = _lastOverlayTransition.OrElse(() => _overlayTransition);
            _lastOverlayTransition = Maybe<IOverlayTransition>.Nothing;
            prevTransition.FadeOutBackground().Subscribe();
            
            var currentTransition = transition ?? view.GetTransition() ?? _navigationTransition;
            if (view.HasNavigator())
                throw new InvalidOperationException("Cannot navigate to a view instance that already has a navigator");

            var currentView = _viewStack.Pop();
            currentView.DoDisappear();

            var viewTransform = view.transform;
            viewTransform.SetParent(transform);
            view.gameObject.Stretch();
            view.gameObject.ScaleOne();

            _viewStack.Push(view);
            view.SetNavigator(this);
            view.DoLoad();


            currentTransition.In(currentView.gameObject, view.gameObject,
                () => { view.gameObject.SetActive(true); },
                () =>
                {
                    if (_isVisible)
                        view.DoAppear();
                    currentView.gameObject.SetActive(false);
                    currentView.DoUnload();
                });
        }


        public void PopView(ITransition transition = null)
        {
            _lastOverlayTransition = Maybe<IOverlayTransition>.Nothing;
            var currentTransition = transition ?? CurrentView.GetTransition() ?? _navigationTransition;
            
            PopWithTransition(
                (currentView, targetView) =>
                {
                    var currentViewGameObject = currentView.gameObject;
                    var targetViewGameObject = targetView.gameObject;

                    currentTransition.Out(
                        currentViewGameObject,
                        targetViewGameObject,
                        () => { targetViewGameObject.SetActive(true); },
                        () =>
                        {
                            currentViewGameObject.SetActive(false);
                            currentViewGameObject.transform.SetParent(null);
                            targetView.DoAppear();
                            currentView.DoUnload();
                        });
                });
        }

        public void DismissView() 
        {
            DismissView((IOverlayTransition) null);
        }

        [Obsolete("DismissView with ITransition parameter is deprecated, please use DismissView with IOverlayTransition parameter instead.")]
        public void DismissView(ITransition transition) 
        {
            DismissView(transition.ToMaybe().SelectOrElse(t => new OverlayTransitionAdapter(t), () => null));
        }

        public void DismissView(IOverlayTransition transition) 
        {
            var currentTransition = transition ?? CurrentView.GetOverlayTransition() ?? _lastOverlayTransition.OrElse(() => _overlayTransition);
            _lastOverlayTransition = Maybe<IOverlayTransition>.Nothing;
            currentTransition.FadeOutBackground().Subscribe();
            
            PopWithTransition(
                (currentView, targetView) =>
                {
                    var currentViewGameObject = currentView.gameObject;
                    var targetViewGameObject = targetView.gameObject;

                    currentTransition.Out(
                        currentViewGameObject,
                        targetViewGameObject,
                        () => { },
                        () =>
                        {
                            currentViewGameObject.SetActive(false);
                            currentViewGameObject.transform.SetParent(null);
                            currentView.DoUnload();
                            targetView.DoDismissedOverlay();
                        });
                });
        }

        private void PopWithTransition(Action<View, View> transition)
        {
            switch (_viewStack.Count)
            {
                case 0:
                    throw new InvalidOperationException("Can't go back when stack is empty");
                case 1:
                    if (navigator != null)
                        navigator.PopView();
                    else
                        _doWhenBackOnEmptyStack.Invoke();
                    break;
                default:
                {
                    var currentView = _viewStack.Pop();
                    currentView.DoDisappear();

                    var targetView = _viewStack.Peek();
                    transition.Invoke(currentView, targetView);
                    break;
                }
            }
        }

        public void DoWhenBackOnEmptyStack(Action action)
        {
            _doWhenBackOnEmptyStack = action;
        }

        public void PushOverlayView(View view) 
        {
            PushOverlayView(view, (IOverlayTransition) null);
        }

        [Obsolete("PushOverlayView with ITransition parameter is deprecated, please use PushOverlayView with IOverlayTransition parameter instead.")]
        public void PushOverlayView(View view, ITransition transition = null) {
            var overlayTransitionAdapter = transition.ToMaybe().SelectOrElse(t => new OverlayTransitionAdapter(t), () => null);
            PushOverlayView(view, overlayTransitionAdapter);
        }
        
        public void PushOverlayView(View view, IOverlayTransition transition)
        {
            var currentTransition = transition ?? view.GetOverlayTransition() ?? _overlayTransition;
            if (view.HasNavigator())
                throw new InvalidOperationException("Cannot navigate to a view instance that already has a navigator");

            var currentView = _viewStack.Peek();
            currentView.DoShownOverlay();

            var viewTransform = view.transform;
            viewTransform.SetParent(_overlayParentTransform.OrElse(transform));
            view.gameObject.Stretch();
            view.gameObject.ScaleOne();

            _viewStack.Push(view);
            view.SetNavigator(this);
            view.DoLoad();

            currentTransition.FadeInBackground(view.GetHashCode().ToString(), view.transform.parent).Subscribe();
            currentTransition.In(null, view.gameObject,
                () => { view.gameObject.SetActive(true); },
                view.DoAppear);
            
            _lastOverlayTransition = currentTransition.ToMaybe();
        }

        public void StartNavigation()
        {
            var view = _viewStack.Peek();
            gameObject.SetActive(true);
            view.DoLoadInnerViews();
            view.DoLoad();            
            view.DoAppear();
        }

        public View CurrentView
        {
            get { return _viewStack.Peek(); }
        }

        public bool IsVisible {
            get { return _isVisible; }
            set { _isVisible = value; }
        }

        public override void DoOnLoad(Action<View> action)
        {
            _viewStack.Peek().DoOnLoad(action);
        }

        public override void DoOnUnLoad(Action<View> action)
        {
            _viewStack.Peek().DoOnUnLoad(action);
        }

        public override void DoOnAppear(Action<View> action)
        {
            _viewStack.Peek().DoOnAppear(action);
        }

        public override void DoOnDisappear(Action<View> action)
        {
            _viewStack.Peek().DoOnDisappear(action);
        }

        public override void DoOnDismissOverlay(Action<View> action)
        {
            _viewStack.Peek().DoOnDismissOverlay(action);
        }

        public override void DoOnShowOverlay(Action<View> action)
        {
            _viewStack.Peek().DoOnShowOverlay(action);
        }

        public override void ClearDoOnLoad()
        {
            _viewStack.Peek().ClearDoOnLoad();
        }

        public override void ClearDoOnUnLoad()
        {
            _viewStack.Peek().ClearDoOnUnLoad();
        }

        public override void ClearDoOnAppear()
        {
            _viewStack.Peek().ClearDoOnAppear();
        }

        public override void ClearDoOnDisappear()
        {
            _viewStack.Peek().ClearDoOnDisappear();
        }

        public override void ClearDoOnDismissOverlay()
        {
            _viewStack.Peek().ClearDoOnDismissOverlay();
        }

        public override void ClearDoOnShowOverlay()
        {
            _viewStack.Peek().ClearDoOnShowOverlay();
        }

        public override void ClearAllLifecycleSideEffect()
        {
            _viewStack.Peek().ClearAllLifecycleSideEffect();
        }

        private void ConfigureDefaultTransitions(float sizeDeltaX, float sizeDeltaY, float animationDuration)
        {
            _width = sizeDeltaX;
            _height = sizeDeltaY;
            _animationDuration = animationDuration;

            _navigationTransition = new DefaultNavigationTransition(_width, _animationDuration);
            _overlayTransition = new DefaultOverlayTransition(_height, _animationDuration);
        }
    }

    public class Builder
    {
        private View _rootView;
        private string _name = "";
        private ITransition _defaultNavigationTransition;
        private IOverlayTransition _defaultOverlayTransition;
        private ITransition _defaultOverlayTransitionLegacy;
        private RectTransform _parentTransform;
        private bool _animated = true;
        private Action _doWhenBackOnEmptyStack;
        private Transform _overlayParentTransform;
        private Canvas _canvas;

        public Builder RootView(View rootView)
        {
            _rootView = rootView;
            return this;
        }

        public Builder OverlayParentTransform(Transform overlayParentTransform)
        {
            _overlayParentTransform = overlayParentTransform;
            return this;
        }


        public Builder Name(string name)
        {
            _name = name;
            return this;
        }
        
        public Builder DefaultOverlayTransition(ITransition transition)
        {
            _defaultOverlayTransitionLegacy = transition;
            return this;
        }
        
        public Builder DefaultOverlayTransition(IOverlayTransition transition)
        {
            _defaultOverlayTransition = transition;
            return this;
        }

        public Builder DefaultNavigationTransition(ITransition transition)
        {
            _defaultNavigationTransition = transition;
            return this;
        }

        public Builder ParentTransform(RectTransform transform)
        {
            _parentTransform = transform;
            return this;
        }

        public Builder Animated(bool animated)
        {
            _animated = animated;
            return this;
        }

        public Builder DoWhenBackOnEmptyStack(Action action)
        {
            _doWhenBackOnEmptyStack = action;
            return this;
        }

        public Builder Canvas(Canvas canvas)
        {
            _canvas = canvas;
            return this;
        }

        public Navigator Build()
        {
            if (_rootView == null)
                throw new Exception("Root view is expected");
            
            if (!_animated) {
                return Navigator.Create(_rootView, _parentTransform, _name, new EmptyTransition(),
                    new EmptyOverlayTransition(), _doWhenBackOnEmptyStack, _overlayParentTransform, _canvas);
            }

            if ((_defaultOverlayTransition != null || _defaultOverlayTransitionLegacy != null) && _defaultNavigationTransition != null)
                return Navigator.Create(_rootView, _parentTransform, _name, _defaultNavigationTransition,
                    GetOverlayTransition(), _doWhenBackOnEmptyStack, _overlayParentTransform, _canvas);

            return Navigator.Create(_rootView, _parentTransform, _name,
                doWhenBackOnEmptyStack: _doWhenBackOnEmptyStack,
                overlayParentTransform: _overlayParentTransform, canvas: _canvas);
        }

        private IOverlayTransition GetOverlayTransition() {
            return _defaultOverlayTransition ?? new OverlayTransitionAdapter(_defaultOverlayTransitionLegacy);
        }
    }
}
