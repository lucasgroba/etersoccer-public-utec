using System;
using System.Collections.Generic;
using System.Linq;
using UniRx;

namespace Etermax.ViewNavigator.Domain
{
    public abstract class UnityView : View
    {
        private CompositeDisposable _compositeDisposable = new CompositeDisposable();
        private readonly List<Action<View>> _doOnLoad = new List<Action<View>>();
        private readonly List<Action<View>> _doOnUnLoad = new List<Action<View>>();
        private readonly List<Action<View>> _doOnDismissOverlay = new List<Action<View>>();
        private readonly List<Action<View>> _doOnShowOverlay = new List<Action<View>>();
        private readonly List<Action<View>> _doOnAppear = new List<Action<View>>();
        private readonly List<Action<View>> _doOnDisappear = new List<Action<View>>();
        protected List<UnityView> InnerViews = new List<UnityView>();

        public Navigator Navigator
        {
            get { return navigator; }
        }

        public override void DoLoad()
        {
            DidLoad();
            _doOnLoad.ForEach(action => action(this));
            InnerViews.ForEach(innerView =>
            {
                innerView.DoLoad();
                innerView.SetNavigator(navigator);
            });
        }

        protected virtual void DidShowOverlay()
        {
        }


        public override void DoShownOverlay()
        {
            DidShowOverlay();
            _doOnShowOverlay.ForEach(action => action(this));
            InnerViews.ForEach(widget => widget.DoShownOverlay());
        }

        protected virtual void DidDismissOverlay()
        {
        }

        protected virtual void DidLoad()
        {
        }

        public override void DoAppear()
        {
            DidAppear();
            _doOnAppear.ForEach(action => action(this));
            InnerViews.ForEach(widget => widget.DoAppear());
        }

        protected virtual void DidAppear()
        {
        }

        public override void DoDisappear()
        {
            DisposeSubscriptions();
            _compositeDisposable = new CompositeDisposable();
            WillDisappear();
            _doOnDisappear.ForEach(action => action(this));
            InnerViews.ForEach(widget => widget.DoDisappear());
        }

        protected virtual void WillDisappear()
        {
        }

        public override void DoDismissedOverlay()
        {
            DidDismissOverlay();
            _doOnDismissOverlay.ForEach(action => action(this));
            InnerViews.ForEach(widget => widget.DoDismissedOverlay());
        }

        public override void DoUnload()
        {
            navigator = null;
            DidUnload();
            _doOnUnLoad.ForEach(action => action(this));
            InnerViews.ForEach(widget => widget.DoUnload());
        }

        protected virtual void DidUnload()
        {
        }

        protected void GoBack(ITransition transition = null)
        {
            navigator.PopView(transition);
        }

        protected void NavigateToRoot(ITransition transition = null)
        {
            navigator.PopToRootView(transition);
        }

        protected void DismissOverlay()
        {
            navigator.DismissView();
            _doOnDismissOverlay.ForEach(action => action(this));
        }

        [Obsolete(
            "DismissView with ITransition parameter is deprecated, please use DismissView with IOverlayTransition parameter instead.")]
        protected void DismissOverlay(ITransition transition)
        {
            navigator.DismissView(transition);
            _doOnDismissOverlay.ForEach(action => action(this));
        }

        protected void DismissOverlay(IOverlayTransition transition)
        {
            navigator.DismissView(transition);
            _doOnDismissOverlay.ForEach(action => action(this));
        }

        protected void MakeMeRoot()
        {
            navigator.MakeCurrentViewRoot();
        }

        protected void PushView(View view, ITransition transition = null)
        {
            navigator.PushView(view, transition);
        }

        protected void PushOverlayView(View view)
        {
            navigator.PushOverlayView(view);
        }

        [Obsolete(
            "PushOverlayView with ITransition parameter is deprecated, please use PushOverlayView with IOverlayTransition parameter instead.")]
        protected void PushOverlayView(View view, ITransition transition)
        {
            navigator.PushOverlayView(view, transition);
        }

        protected void PushOverlayView(View view, IOverlayTransition transition)
        {
            navigator.PushOverlayView(view, transition);
        }

        protected void RestartNavigation(View view, ITransition transition = null)
        {
            navigator.RestartNavigation(view, transition);
        }

        protected void ReplaceView(View view, ITransition transition = null)
        {
            navigator.ReplaceView(view, transition);
        }

        protected void RegisterLifeCycleSubscriptions(params IDisposable[] disposables)
        {
            foreach (var disposable in disposables)
            {
                _compositeDisposable.Add(disposable);
            }
        }

        protected void InstantiateInnerView(Func<UnityView> action)
        {
            var unityView = action();
            unityView.SetNavigator(navigator);
            unityView.DidLoad();

            InnerViews.Add(unityView);
        }

        protected void ClearRemovedInnerViews()
        {
            InnerViews.RemoveAll(view => view == null);
        }

        private void DisposeSubscriptions()
        {
            _compositeDisposable.Clear();
        }

        public override void DoOnLoad(Action<View> action)
        {
            _doOnLoad.Add(action);
        }

        public override void DoLoadInnerViews()
        {
            InnerViews = GetInnerViews();
        }

        private List<UnityView> GetInnerViews()
        {
            var innerViews = GetComponentsInChildren<UnityView>(true).ToList();
            innerViews.RemoveAt(0);
            return innerViews;
        }

        public override void DoOnUnLoad(Action<View> action)
        {
            _doOnUnLoad.Add(action);
        }

        public override void DoOnAppear(Action<View> action)
        {
            _doOnAppear.Add(action);
        }

        public override void DoOnDisappear(Action<View> action)
        {
            _doOnDisappear.Add(action);
        }

        public override void DoOnDismissOverlay(Action<View> action)
        {
            _doOnDismissOverlay.Add(action);
        }

        public override void DoOnShowOverlay(Action<View> action)
        {
            _doOnShowOverlay.Add(action);
        }

        public override void ClearDoOnLoad()
        {
            _doOnLoad.Clear();
        }

        public override void ClearDoOnUnLoad()
        {
            _doOnUnLoad.Clear();
        }

        public override void ClearDoOnAppear()
        {
            _doOnAppear.Clear();
        }

        public override void ClearDoOnDisappear()
        {
            _doOnDisappear.Clear();
        }

        public override void ClearDoOnDismissOverlay()
        {
            _doOnDismissOverlay.Clear();
        }

        public override void ClearDoOnShowOverlay()
        {
            _doOnShowOverlay.Clear();
        }

        public override void ClearAllLifecycleSideEffect()
        {
            ClearDoOnLoad();
            ClearDoOnAppear();
            ClearDoOnUnLoad();
            ClearDoOnDisappear();
            ClearDoOnShowOverlay();
            ClearDoOnDismissOverlay();
        }
    }
}