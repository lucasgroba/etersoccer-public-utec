using Etermax.EditorExtensions.Data;
using Etermax.EditorExtensions.Utilities;
using Etermax.ViewNavigator.Domain;
using Etermax.ViewNavigator.Infrastructure.Editor.Utilities;
using Etermax.ViewNavigator.Infrastructure.ScripteableObjects;
using UnityEditor;
using UnityEditor.Callbacks;
using UnityEditorLayoutWrapper.Components;
using UnityEngine;

namespace Etermax.ViewNavigator.Infrastructure.Editor {
	public class TabBarViewCreationWindow : EditorWindow {
		private static string _viewName;
		private Object _folderObject;

		private void OnEnable() {
			Reset();
		}

		private void Reset() {
			_viewName = "";
		}

		void OnGUI() {
			ComposedLayout.Header("Create TabBar");

			RenderTop();
			RenderFolderSelection();

			Button.Custom("Create " + _viewName, () => {
				if (EditorUtilities.EditorDataExists())
					EditorUtilities.DeleteEditorData();

				CreationDirectories.ResetDefaultRootFolderPath();

				if (_folderObject != null)
				{
					string rootFolder = AssetDatabase.GetAssetPath(_folderObject);

					CreationDirectories.RootFolderPath = rootFolder;
				} 

				ViewUtilities.CreateViewPrefabFoldersStructure(_viewName);
				ViewProviderUtilities.CreateViewPresenterProvidersFoldersStructure(_viewName);

				var providerCreationSucceed =
					ViewProviderUtilities.CreateTabBarViewProviderScript(_viewName);

				if (providerCreationSucceed) {
					var editorData = CreateInstance<EditorData>();
					editorData.Add("tabBarName", _viewName);
					editorData.Add("isTabBar", "true");
					if (_folderObject != null)
						editorData.Add("rootFolder", AssetDatabase.GetAssetPath(_folderObject));
					EditorUtilities.SaveEditorData(editorData);
					RefreshEditor();
				}

				Close();
			});
		}

		private void RenderTop() {
			Layout.VerticalBox(() => {
				Label.Bold("TabBar View Name:", Color.white);
				Layout.VerticalWhiteBox(() => {
					GUI.SetNextControlName("prpr");
					_viewName = GUILayout.TextArea(_viewName);
					GUI.FocusControl("prpr");
				});
			});
		}

		private void RenderFolderSelection() {
			Layout.VerticalBox(() => {
				Label.Bold("Choose folder path:", Color.white);
				Label.Custom("This is optional. Default is " + CreationDirectories.DefaultRootFolderPath, Color.yellow);
				Layout.VerticalWhiteBox(() =>
				{
					_folderObject = EditorGUILayout.ObjectField(_folderObject, typeof(Object), true);
				});
			});
		}

		private void RefreshEditor() {
			AssetDatabase.Refresh();
		}

		[DidReloadScripts]
		private static void ScriptsReloaded() {
			var editorData = EditorUtilities.LoadEditorData();
			if (editorData == null) return;
			if (!editorData.ContainsKey("isTabBar") || editorData.GetString("isTabBar") == "false") return;
			if (EditorUtilities.EditorDataExists())
				EditorUtilities.DeleteEditorData();

			var className = editorData.GetString("tabBarName");
			_viewName = className + "View";

			if(editorData.ContainsKey("rootFolder"))
				CreationDirectories.RootFolderPath = editorData.GetString("rootFolder");
			else
				CreationDirectories.ResetDefaultRootFolderPath();
			
			var prefab = ViewUtilities.CreateTabBarViewPrefab(_viewName);
			var viewSettings = ViewMenuItems.GetViewsSettings();
			viewSettings.Add(new ViewSetting(_viewName, prefab.GetComponent<UnityView>()));
			AssetDatabase.Refresh();
			EditorUtility.SetDirty(viewSettings);
		}
	}
}