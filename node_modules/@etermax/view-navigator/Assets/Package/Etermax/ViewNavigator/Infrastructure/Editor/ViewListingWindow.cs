using System.Collections.Generic;
using System.IO;
using System.Linq;
using Etermax.EditorExtensions.Utilities;
using Etermax.ViewNavigator.Domain;
using Etermax.ViewNavigator.Infrastructure.Editor.Utilities;
using UnityEditor;
using UnityEditor.Callbacks;
using UnityEditorLayoutWrapper.Components;
using UnityEditorLayoutWrapper.Layout.Utilities;
using UnityEngine;
using Object = UnityEngine.Object;

namespace Etermax.ViewNavigator.Infrastructure.Editor
{
    public class ViewListingWindow : EditorWindow
    {
        private static List<UnityView> _views = new List<UnityView>();
        private static List<Object> _viewMonosInScene = new List<Object>();
        private bool _inProjectFold = true;
        private bool _inSceneFold = true;
        private Vector2 _scroll;
        private string _searchFilter = "";

        [DidReloadScripts]
        private static void ScriptsReloaded()
        {
            LoadViews();
        }

        private void OnEnable()
        {
            LoadViews();
        }

        private static void LoadViews()
        {
            _views = new List<UnityView>();
            _viewMonosInScene = new List<Object>();
            _views = EditorUtilities.LoadPrefabOfType<UnityView>();
            _views = _views.OrderBy(view => view.name).ToList();
        }

        private void OnGUI()
        {
            ComposedLayout.Header("Views");
            Layout.Horizontal(() => { Button.Custom("Create View", ViewMenuItems.CreateView); });
            Layout.Horizontal(() => { Button.Custom("Create TabBar View", ViewMenuItems.CreateTabBarView); });

            _searchFilter = ComposedLayout.Search(_searchFilter);

            Layout.Vertical(() =>
            {
                if (!_views.Any()) return;

                _viewMonosInScene = FindObjectsOfType(typeof(UnityView))
                    .Where(view => view.name.ToLower().Contains(_searchFilter.ToLower()) || string.IsNullOrEmpty(_searchFilter))
                    .OrderBy(view => view.name).ToList();

                _scroll = GUILayout.BeginScrollView(_scroll,
                    false,
                    false,
                    GUIStyle.none,
                    GUI.skin.verticalScrollbar);

                Layout.HorizontalBox(() => Label.Bold("Views", Color.white));
                Layout.VerticalHelpbox(() =>
                {
                    Layout.HorizontalBox(() =>
                    {
                        Icon.ForExtension("folder");
                        Label.Bold("Project", Color.white);
                        if (_views.Any(IsInProject))
                            _inProjectFold = Foldout.Custom(_inProjectFold);
                    });

                    if (_inProjectFold)
                    {
                        foreach (var unityView in _views.Where(IsInProject).Where(view => view.name.ToLower().Contains(_searchFilter.ToLower()) || string.IsNullOrEmpty(_searchFilter)))
                        {
                            RenderInProjectRow(unityView);
                        }
                    }

                    Layout.HorizontalBox(() =>
                    {
                        Icon.ForExtension("unity");
                        Label.Bold("Scene", Color.white);
                        if (_views.Any(IsInScene))
                            _inSceneFold = EditorGUILayout.Foldout(_inSceneFold, "");
                    });

                    if (!_inSceneFold) return;
                    
                    foreach (var unityView in _views.Where(IsInScene))
                    {
                        RenderInSceneRow(ToScenePrefabInstance(unityView), unityView);
                    }
                });

                GUILayout.EndScrollView();
            });
        }

        private bool IsInProject(UnityView unityView)
        {
            return !IsInScene(unityView);
        }


        private bool IsInScene(UnityView unityView)
        {
            var viewGuid = AssetDatabase.AssetPathToGUID(AssetDatabase.GetAssetPath(unityView));
            return _viewMonosInScene.Any(obj =>
            {
                var prefabParent = PrefabUtility.GetPrefabParent(obj);
                var prefabPath = AssetDatabase.GetAssetPath(prefabParent);
                var prefabGuid = AssetDatabase.AssetPathToGUID(prefabPath);
                return prefabGuid == viewGuid;
            });
        }

        private UnityView ToScenePrefabInstance(UnityView unityView)
        {
            var viewGuid = AssetDatabase.AssetPathToGUID(AssetDatabase.GetAssetPath(unityView));
            return (UnityView) _viewMonosInScene.FirstOrDefault(obj =>
            {
                var prefabParent = PrefabUtility.GetPrefabParent(obj);
                var prefabPath = AssetDatabase.GetAssetPath(prefabParent);
                var prefabGuid = AssetDatabase.AssetPathToGUID(prefabPath);
                return prefabGuid == viewGuid;
            });
        }

        private void RenderInProjectRow(UnityView unityView)
        {
            Layout.HorizontalWhiteBox(() =>
            {
                Icon.ForExtension("prefab");

                Layout.Vertical(() =>
                {
                    Label.Bold(unityView.name, new Color32(97, 171, 91, 255));
                    var limitedPath =
                        UnityEditorLayoutUtilities.LimitStringTo(65, AssetDatabase.GetAssetPath(unityView));
                    var content = new GUIContent(limitedPath, AssetDatabase.GetAssetPath(unityView));
                    Label.Custom(content, Color.gray);
                });

                GUILayout.FlexibleSpace();

                Button.Custom("Instantiate", () =>
                {
                    var instance = ViewUtilities.InstantiateOnCanvas(unityView.gameObject);
                    Selection.activeGameObject = instance;
                });
                Button.SearchButton(() => { Selection.activeObject = unityView; });
                Button.TrashButton(() =>
                {
                    if (!EditorUtility.DisplayDialog("Delete GameObject",
                        "Are you sure you want to delete " + unityView.name +
                        " permanently?\nYou cannot undo this action.", "Yes - Delete", "No")) return;
                    File.Delete(AssetDatabase.GetAssetPath(unityView));
                    AssetDatabase.Refresh();
                    _views = EditorUtilities.LoadPrefabOfType<UnityView>();
                });
            });
        }

        private void RenderInSceneRow(UnityView unityViewInScene, UnityView unityViewPrefab)
        {
            Layout.HorizontalWhiteBox(() =>
            {
                Icon.ForExtension("prefab");

                Layout.Vertical(() =>
                {
                    Label.Bold(unityViewInScene.name, new Color32(97, 171, 91, 255));
                    var limitedPath =
                        UnityEditorLayoutUtilities.LimitStringTo(65, GetGameObjectPath(unityViewInScene.gameObject));
                    var content = new GUIContent(limitedPath, GetGameObjectPath(unityViewInScene.gameObject));
                    Label.Custom(content, Color.gray);
                });

                GUILayout.FlexibleSpace();

                Button.Custom("Select", () => { Selection.activeObject = unityViewInScene; });
                Button.SearchButton(() => { Selection.activeObject = unityViewPrefab; });
                Button.TrashButton(() =>
                {
                    if (EditorUtility.DisplayDialog("Delete GameObject",
                        "Are you sure you want to delete " + unityViewInScene.name +
                        " from the scene?\nChanges can be lost.", "Yes - Delete", "No"))
                    {
                        DestroyImmediate(unityViewInScene.gameObject);
                    }
                });
            });
        }

        public static string GetGameObjectPath(GameObject obj)
        {
            var path = "/" + obj.name;
            while (obj.transform.parent != null)
            {
                obj = obj.transform.parent.gameObject;
                path = "/" + obj.name + path;
            }

            return path;
        }
    }
}