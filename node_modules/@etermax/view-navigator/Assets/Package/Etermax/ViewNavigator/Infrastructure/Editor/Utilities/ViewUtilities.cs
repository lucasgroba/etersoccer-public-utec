using System;
using System.Collections.Generic;
using System.Linq;
using Etermax.EditorExtensions.ScriptUtilities;
using Etermax.EditorExtensions.ScriptUtilities.Builder;
using Etermax.EditorExtensions.Utilities;
using Etermax.ViewNavigator.Domain;
using UnityEditor;
using UnityEngine;
using Object = UnityEngine.Object;

namespace Etermax.ViewNavigator.Infrastructure.Editor.Utilities
{
    public static class ViewUtilities
    {
        private const string TemplateView = "_View_";
        private const string TabBarView = "_TabBar_";

        private static readonly List<string> Libraries = new List<string>
        {
            typeof(UnityView).Namespace
        };

        public const string BaseClass = "UnityView";

        public static readonly string Body = @"
{
		protected override void DidLoad() 
		{
		}

		protected override void DidAppear() 
		{
		}

		protected override void DidShowOverlay()
		{
		}
		
		protected override void DidDismissOverlay() 
		{
		}

		protected override void WillDisappear() 
		{
		}

		protected override void DidUnload() 
		{
		}
	}".Remove(0, 1);

        public static readonly string BodyWithPresenter = @"
{
		private PresenterName _presenter;
		
		protected override void DidLoad() 
		{
			_presenter = ProviderName.Presenter(this);
		}

		protected override void DidAppear() 
		{
		}

		protected override void DidShowOverlay() 
		{
		}
		
		protected override void DidDismissOverlay() 
		{
		}

		protected override void WillDisappear() 
		{
		}

		protected override void DidUnload() 
		{
		}
	}".Remove(0, 1);

        public static void CreateViewFoldersStructure(string className)
        {
            var viewName = className + "View";
            EditorUtilities.CreateFolderPathFromAssets(CreationDirectories.ViewScriptFolderPath(viewName));
        }

        public static void CreateViewPrefabFoldersStructure(string className)
        {
            var viewName = className + "View";
            EditorUtilities.CreateFolderPathFromAssets(CreationDirectories.ViewPrefabFolderPath(viewName));
        }

        public static bool CreateViewScript(string className, bool useMvp)
        {
            var viewClassName = className + "View";
            var folderPath = CreationDirectories.ViewScriptFolderPath(viewClassName);
            Libraries.Add("Presentations." + className + ".Views");
            Libraries.Add("Presentations." + className + ".Providers");
            if (useMvp)
                Libraries.Add("Presentations." + className + ".Presenters");
            var body = GetScriptBody(viewClassName, useMvp);
            return ScriptBuilder.New()
                .FolderPath(folderPath)
                .Name(viewClassName)
                .Body(body)
                .Libraries(Libraries)
                .BaseClass(BaseClass)
                .Namespace("Presentations." + className + ".UnityDelivery.Views")
                .Interfaces(new List<string> {"I" + viewClassName})
                .Create();
        }

        public static GameObject CreateViewPrefab(Type viewScript)
        {
            var templateGameObject = CreateTemplateObject();
            templateGameObject.AddComponent(viewScript);
            templateGameObject.name = viewScript.Name;
            var prefabName = viewScript.Name + ".prefab";
            var prefabPath = CreationDirectories.ViewPrefabFolderPath(viewScript.Name, prefabName);
            EditorUtilities.Log("Creating View Prefab in: " + prefabPath);
            var prefab = PrefabUtility.CreatePrefab(prefabPath, templateGameObject);
            Object.DestroyImmediate(templateGameObject);
            var prefabGameObject =
                (GameObject) PrefabUtility.InstantiatePrefab(AssetDatabase.LoadAssetAtPath<GameObject>(prefabPath));
            prefabGameObject.transform.SetParent(ViewNavigatorUtilities.GetOrInstantiateCanvas().transform, false);
            Selection.activeGameObject = prefabGameObject;
            return prefab;
        }

        public static GameObject CreateTabBarViewPrefab(string gameObjectName)
        {
            var templateGameObject = CreateTabBarTemplateObject();
            templateGameObject.name = gameObjectName;
            var prefabName = gameObjectName + ".prefab";
            var prefabPath = CreationDirectories.ViewPrefabFolderPath(gameObjectName, prefabName);
            EditorUtilities.Log("Creating TabBarView Prefab in: " + prefabPath);
            var prefab = PrefabUtility.CreatePrefab(prefabPath, templateGameObject);
            Object.DestroyImmediate(templateGameObject);
            var prefabGameObject =
                (GameObject) PrefabUtility.InstantiatePrefab(AssetDatabase.LoadAssetAtPath<GameObject>(prefabPath));
            prefabGameObject.transform.SetParent(ViewNavigatorUtilities.GetOrInstantiateCanvas().transform, false);
            Selection.activeGameObject = prefabGameObject;
            return prefab;
        }

        private static string GetScriptBody(string viewClassName, bool useMvp)
        {
            if (!useMvp)
            {
                return Body;
            }

            var viewPresenterName = viewClassName + "Presenter";
            var viewProviderName = viewClassName + "Provider";
            return BodyWithPresenter.Replace("PresenterName", viewPresenterName)
                .Replace("ProviderName", viewProviderName);
        }

        private static GameObject CreateTabBarTemplateObject()
        {
            var templatePrefab = FindTemplatePrefab(TabBarView);
            var currentCanvas = GetViewsCanvas();
            var templateGameObject = Object.Instantiate(templatePrefab, currentCanvas.transform);
            return templateGameObject;
        }

        private static GameObject CreateTemplateObject()
        {
            var templatePrefab = FindTemplatePrefab(TemplateView);
            var currentCanvas = GetViewsCanvas();
            var templateGameObject = Object.Instantiate(templatePrefab, currentCanvas.transform);
            return templateGameObject;
        }

        public static GameObject FindTemplatePrefab(string templateName)
        {
            var assetPaths = AssetDatabase.GetAllAssetPaths();
            var templatePath = assetPaths.First(path => path.Contains(templateName));
            var templateAsset = AssetDatabase.LoadAssetAtPath<GameObject>(templatePath);
            return templateAsset;
        }


        public static GameObject InstantiateOnCanvas(Object prefab)
        {
            var canvasTransform = GetViewsCanvas().transform;
            var prefabInstance = (GameObject) PrefabUtility.InstantiatePrefab(prefab);
            prefabInstance.transform.SetParent(canvasTransform, false);
            Selection.activeGameObject = prefabInstance;
            return prefabInstance;
        }

        private static Canvas GetViewsCanvas()
        {
            return ViewNavigatorUtilities.GetOrInstantiateCanvas();
        }

        public static string GetLibrariesAsString()
        {
            return ScriptUtilities.UsingsAsString(Libraries);
        }
    }
}