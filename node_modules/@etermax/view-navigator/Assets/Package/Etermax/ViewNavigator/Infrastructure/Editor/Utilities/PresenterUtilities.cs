using System.Collections.Generic;
using Etermax.EditorExtensions.ScriptUtilities;
using Etermax.EditorExtensions.ScriptUtilities.Builder;
using Etermax.EditorExtensions.Utilities;

namespace Etermax.ViewNavigator.Infrastructure.Editor.Utilities
{
    public static class PresenterUtilities
    {
        private static readonly List<string> Libraries = new List<string>();

        public static readonly string PresenterScriptBody = @"
{
	    private readonly ViewName _view;

	    public ClassName(ViewName view) 
        {
		    _view = view;
	    }
    }".Remove(0,1);

        public static void CreatePresenterFoldersStructure(string className)
        {
            var viewName = className + "View";
            EditorUtilities.CreateFolderPathFromAssets(CreationDirectories.PresenterScriptFolderPath(viewName));
        }

        public static bool CreatePresenterScript(string className)
        {
            var viewClassName = className + "View";
            var presenterClassName = viewClassName + "Presenter";
            var folderPath = CreationDirectories.PresenterScriptFolderPath(viewClassName);
            var body = PresenterScriptBody
                .Replace("ViewName", "I" + viewClassName)
                .Replace("ClassName", presenterClassName);
            Libraries.Add("Presentations." + className + ".Views");
            return ScriptBuilder.New()
                .FolderPath(folderPath)
                .Name(presenterClassName)
                .Body(body)
                .Namespace("Presentations." + className + ".Presenters")
                .Libraries(Libraries)
                .Create();
        }

        public static string GetLibrariesAsString()
        {
            return ScriptUtilities.UsingsAsString(Libraries);
        }
    }
}