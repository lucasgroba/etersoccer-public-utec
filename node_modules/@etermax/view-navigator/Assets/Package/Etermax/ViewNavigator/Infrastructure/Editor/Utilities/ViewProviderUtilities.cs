using System.Collections.Generic;
using Etermax.EditorExtensions.ScriptUtilities.Builder;
using Etermax.EditorExtensions.Utilities;

namespace Etermax.ViewNavigator.Infrastructure.Editor.Utilities {
	public static class ViewProviderUtilities
	{

		private static readonly string ProviderScriptBody = @"
{
		public static VIEW_CLASS_NAME View() 
		{
			var viewPrefab = ViewSettingsProvider.GetViewPrefab(""VIEW_CLASS_NAME"");
			var viewMonobehaviour =
				GameObject.Instantiate(viewPrefab, ViewNavigatorUtilities.GetOrInstantiateCanvas().transform);
			return (VIEW_CLASS_NAME) viewMonobehaviour;
		}
	}".Remove(0,1);

		private static readonly string ProviderTabBarScriptBody = @"
{
		public static VIEW_CLASS_NAME View() 
		{
			var viewPrefab = ViewSettingsProvider.GetViewPrefab(""VIEW_NAME"");
			var viewMonobehaviour =
				GameObject.Instantiate(viewPrefab, ViewNavigatorUtilities.GetOrInstantiateCanvas().transform);
			return (VIEW_CLASS_NAME) viewMonobehaviour;
		}
	}".Remove(0,1);

		private static readonly string ProviderScriptBodyWithPresenter = @"
{
		public static VIEW_CLASS_NAME View() 
		{
			var viewPrefab = ViewSettingsProvider.GetViewPrefab(""VIEW_CLASS_NAME"");
			var viewMonobehaviour =
				GameObject.Instantiate(viewPrefab, ViewNavigatorUtilities.GetOrInstantiateCanvas().transform);
			return (VIEW_CLASS_NAME) viewMonobehaviour;
		}
	
		public static PRESENTER_NAME Presenter(INTERFACE_NAME view) 
		{
			return new PRESENTER_NAME(view);
		}
	}".Remove(0,1);

		public static void CreateViewPresenterProvidersFoldersStructure(string className) {
			var viewName = className + "View";
			EditorUtilities.CreateFolderPathFromAssets(CreationDirectories.ProvidersScriptFolderPath(viewName));
		}

		public static bool CreateTabBarViewProviderScript(string tabBarName) {
			var tabBarViewName = tabBarName + "View";
			var providerClassName = tabBarViewName + "Provider";
			var body = GetTabBarBody(tabBarViewName);
			var folderPath = CreationDirectories.ProvidersScriptFolderPath(tabBarViewName);
			var libraries = new List<string> {
				"ViewNavigator.Domain",
				"ViewNavigator.Infrastructure.Services",
				"ViewNavigator.Utilities",
				"UnityEngine"
			};

			return ScriptBuilder.New()
				.FolderPath(folderPath)
				.Name(providerClassName)
				.Body(body)
				.Namespace("Presentations.TabBars.Providers")
				.Libraries(libraries)
				.AsStatic()
				.Create();
		}

		public static bool CreateViewProviderScript(string className, bool useMvp = false) {
			var viewClassName = className + "View";
			var providerClassName = viewClassName + "Provider";
			var body = GetBody(viewClassName, useMvp);
			var folderPath = CreationDirectories.ProvidersScriptFolderPath(viewClassName);
			var libraries = new List<string> {
				"Presentations." + className + ".Views",
				"ViewNavigator.Infrastructure.Services",
				"Presentations." + className + ".UnityDelivery.Views",
				"ViewNavigator.Infrastructure.Behaviours",
				"ViewNavigator.Utilities",
				"UnityEngine"
			};
			if (useMvp)
				libraries.Add("Presentations." + className + ".Presenters");

			return ScriptBuilder.New()
				.FolderPath(folderPath)
				.Name(providerClassName)
				.Body(body)
				.Namespace("Presentations." + className + ".Providers")
				.Libraries(libraries)
				.AsStatic()
				.Create();
		}

		private static string GetBody(string viewClassName, bool useMvp) {
			var presenterClassName = viewClassName + "Presenter";
			var viewInterfaceName = "I" + viewClassName;
			var behaviour = "UnityView";
			if (!useMvp)
				return ProviderScriptBody
					.Replace("VIEW_CLASS_NAME", viewClassName)
					.Replace("BEHAVIOUR", behaviour);

			return ProviderScriptBodyWithPresenter
				.Replace("VIEW_CLASS_NAME", viewClassName)
				.Replace("INTERFACE_NAME", viewInterfaceName)
				.Replace("PRESENTER_NAME", presenterClassName)
				.Replace("BEHAVIOUR", behaviour);
		}

		private static string GetTabBarBody(string viewClassName) {
			var behaviour = "UnityView";
			return ProviderTabBarScriptBody
				.Replace("VIEW_NAME", viewClassName)
				.Replace("VIEW_CLASS_NAME", "TabBar");
		}
	}
}