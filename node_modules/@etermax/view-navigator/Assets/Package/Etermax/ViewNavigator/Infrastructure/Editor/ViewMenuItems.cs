using Etermax.EditorExtensions.Utilities;
using Etermax.ViewNavigator.Infrastructure.ScripteableObjects;
using UnityEditor;
using UnityEngine;

namespace Etermax.ViewNavigator.Infrastructure.Editor
{
    public class ViewMenuItems : UnityEditor.Editor
    {
        private const string ViewEditorTitle = "View";

        public static ScripteableViewsSettings GetViewsSettings()
        {
            return GetOrCreateViewsSettings();
        }

        private static ScripteableViewsSettings GetOrCreateViewsSettings()
        {
            var viewSettings =
                Resources.Load<ScripteableViewsSettings>(ViewSettingsLoaderService.ViewSettingResourcesPath);
            if (viewSettings != null) return viewSettings;

            viewSettings = CreateInstance<ScripteableViewsSettings>();
            EditorUtilities.CreateFolderPathFromAssets("Assets/Resources/Settings/");
            AssetDatabase.CreateAsset(viewSettings, "Assets/Resources/Settings/ViewSettings.asset");
            viewSettings =
                Resources.Load<ScripteableViewsSettings>(ViewSettingsLoaderService.ViewSettingResourcesPath);

            return viewSettings;
        }

        public static void CreateView()
        {
            var window = EditorWindow.GetWindow<ViewCreationWindow>(true, ViewEditorTitle, true);
            window.position = new Rect(Vector2.zero, new Vector2(1000, 700));
            window.minSize = new Vector2(1000, 700);
            window.Show();
        }
        
        public static void CreateTabBarView()
        {
            var window = EditorWindow.GetWindow<TabBarViewCreationWindow>(true, ViewEditorTitle, true);
            window.position = new Rect(Vector2.zero, new Vector2(1000, 700));
            window.minSize = new Vector2(1000, 700);
            window.Show();
        }

        [MenuItem("Etermax/View Navigator/Views")]
        private static void ListView()
        {
            var editorAsm = typeof(UnityEditor.Editor).Assembly;
            var inspWndType = editorAsm.GetType("UnityEditor.InspectorWindow");
            var window = EditorWindow.GetWindow<ViewListingWindow>("Views", true, inspWndType);
            window.minSize = new Vector2(600, 700);
            window.Show();
        }

        [MenuItem("Etermax/View Navigator/Views Settings")]
        public static void CreateViewSettings()
        {
            Selection.activeObject = GetOrCreateViewsSettings();
        }
    }
}