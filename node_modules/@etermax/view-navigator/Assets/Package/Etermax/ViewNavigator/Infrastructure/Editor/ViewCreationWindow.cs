using System;
using Etermax.EditorExtensions.Data;
using Etermax.EditorExtensions.ScriptUtilities;
using Etermax.EditorExtensions.Utilities;
using Etermax.ViewNavigator.Domain;
using Etermax.ViewNavigator.Infrastructure.Editor.Utilities;
using Etermax.ViewNavigator.Infrastructure.ScripteableObjects;
using UnityEditor;
using UnityEditor.Callbacks;
using UnityEditorLayoutWrapper.Components;
using UnityEngine;
using Object = UnityEngine.Object;

namespace Etermax.ViewNavigator.Infrastructure.Editor {
	public class ViewCreationWindow : EditorWindow {
		private static string _viewName;
		private static string _viewScriptBody;
		private Object _folderObject;
		private Vector2 _scrollbar;
		private const int ScriptPreviewSizeHeight = 290;
		private const int ScriptPreviewSizeWidth = 290;
		private bool _useMvp = true;

		private void OnEnable() {
			Reset();
		}

		private void Reset() {
			_viewName = "";
		}

		private void OnGUI() {
			ComposedLayout.Header("Create View");
			RenderViewNameLabel();
			RenderFolderSelection();
			Layout.Horizontal(() => {
				RenderViewScriptPreview();
				if (_useMvp)
					RenderPresenterScriptPreview();
			});

			GUI.enabled = IsValidName();

			Button.Custom("Create " + _viewName + " View", () => {
				if (EditorUtilities.EditorDataExists())
					EditorUtilities.DeleteEditorData();

				CreationDirectories.ResetDefaultRootFolderPath();

				if (_folderObject != null)
				{
					string rootFolder = AssetDatabase.GetAssetPath(_folderObject);

					CreationDirectories.RootFolderPath = rootFolder;
				} 
					
				ViewUtilities.CreateViewFoldersStructure(_viewName);
				ViewUtilities.CreateViewPrefabFoldersStructure(_viewName);

				ViewInterfaceUtilities.CreateViewFoldersStructure(_viewName);
				ViewProviderUtilities.CreateViewPresenterProvidersFoldersStructure(_viewName);

				if (_useMvp) {
					PresenterUtilities.CreatePresenterFoldersStructure(_viewName);
					PresenterUtilities.CreatePresenterScript(_viewName);
				}

				var viewInterfaceSucceed = ViewInterfaceUtilities.CreteViewInterfaceFor(_viewName);
				var viewCreationSucceed = ViewUtilities.CreateViewScript(_viewName, _useMvp);

				var providerCreationSucceed =
					ViewProviderUtilities.CreateViewProviderScript(_viewName, _useMvp);

				if (viewCreationSucceed &&
				    providerCreationSucceed &&
				    viewInterfaceSucceed) {
					var editorData = CreateInstance<EditorData>();
					editorData.Add("classname", _viewName);
					editorData.Add("isview", "true");
					if (_folderObject != null)
						editorData.Add("rootFolder", AssetDatabase.GetAssetPath(_folderObject));
					EditorUtilities.SaveEditorData(editorData);
					RefreshEditor();
				}

				Close();
			});

			GUI.enabled = true;
		}

		private bool IsValidName() {
			return !string.IsNullOrEmpty(_viewName) && !_viewName.ToLower().Contains("view");
		}

		private void RenderViewNameLabel() {
			Layout.VerticalBox(() => {
				Label.Bold("View Name:", Color.white);
				Layout.VerticalWhiteBox(() => {
					GUI.SetNextControlName("prpr");
					_viewName = GUILayout.TextArea(_viewName);
					GUI.FocusControl("prpr");
					Layout.Horizontal(() => {
						GUI.enabled = false;
						Label.Custom("Example: Confirm", Color.black);
						GUI.enabled = true;
						_useMvp = GUILayout.Toggle(_useMvp, new GUIContent("Mvp", "Use Model-View-Presenter Pattern"));
					});
				});
			});
		}
		
		private void RenderFolderSelection() {
			Layout.VerticalBox(() => {
				Label.Bold("Choose folder path:", Color.white);
				Label.Custom("This is optional. Default is " + CreationDirectories.DefaultRootFolderPath, Color.yellow);
				Layout.VerticalWhiteBox(() =>
				{
					_folderObject = EditorGUILayout.ObjectField(_folderObject, typeof(Object), true);
				});
			});
		}

		private void RenderViewScriptPreview() {
			Layout.VerticalBox(() => {
				Label.Bold("View Script Preview:", Color.white);

				var className = _viewName + "View";
				var interfaceName = " I" + className;
				string body;
				if (_useMvp) {
					body = ViewUtilities.BodyWithPresenter
						.Replace("PresenterName", className + "Presenter")
						.Replace("ProviderName", className + "Provider");
				}
				else {
					body = ViewUtilities.Body;
				}

				var scriptPreview = ViewUtilities.GetLibrariesAsString() +
				                    "\npublic class " + className + " : " +
				                    ViewUtilities.BaseClass + ", " + interfaceName + "\n" + body;
				GUILayout.TextArea(scriptPreview, GUILayout.MinHeight(ScriptPreviewSizeHeight),
					GUILayout.MinWidth(ScriptPreviewSizeWidth));
			});
		}

		private void RenderPresenterScriptPreview() {
			Layout.VerticalBox(() => {
				Label.Bold("Presenter Script Preview:", Color.white);

				var className = _viewName + "ViewPresenter";
				var viewInterface = "I" + _viewName + "View";

				var scriptPreview = PresenterUtilities.GetLibrariesAsString() +
				                    "\npublic class " + className + "\n" +
				                    PresenterUtilities.PresenterScriptBody.Replace("ViewName", viewInterface)
					                    .Replace("ClassName", className);
				GUILayout.TextArea(scriptPreview, GUILayout.MinHeight(ScriptPreviewSizeHeight),
					GUILayout.MinWidth(ScriptPreviewSizeWidth));
			});
		}

		private void RefreshEditor() {
			AssetDatabase.Refresh();
		}

		[DidReloadScripts]
		private static void ScriptsReloaded() {
			var editorData = EditorUtilities.LoadEditorData();
			if (editorData == null) return;
			if (!editorData.ContainsKey("isview") || editorData.GetString("isview") == "false") return;
			if (EditorUtilities.EditorDataExists())
				EditorUtilities.DeleteEditorData();

			var className = editorData.GetString("classname");
			_viewName = className + "View";

			var viewScript = ScriptUtilities.GetClassFromAssembly(_viewName);

			if (viewScript == null)
				throw new Exception("Something wrong happened when saving the script. Try again");

			if(editorData.ContainsKey("rootFolder"))
				CreationDirectories.RootFolderPath = editorData.GetString("rootFolder");
			else
				CreationDirectories.ResetDefaultRootFolderPath();
			
			var prefab = ViewUtilities.CreateViewPrefab(viewScript);
			var viewSettings = ViewMenuItems.GetViewsSettings();
			viewSettings.Add(new ViewSetting(_viewName, prefab.GetComponent<UnityView>()));
			AssetDatabase.Refresh();
			EditorUtility.SetDirty(viewSettings);
		}
	}
}