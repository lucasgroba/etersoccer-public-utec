using System;
using System.Collections;
using System.Collections.Generic;
using Etermax.Json.Errors;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;

namespace Etermax.Json{
	public class JsonObject : IEnumerable<KeyValuePair<string, object>>{
		private readonly JObject _jObject;
		static JsonSerializer _jsonSerializer = new JsonSerializer {
			ContractResolver = new CamelCasePropertyNamesContractResolver(),
			DateFormatHandling = DateFormatHandling.IsoDateFormat,
			MissingMemberHandling = MissingMemberHandling.Error
		};

		public static JsonObject FromJson(string json){
			var values = JsonConvert.DeserializeObject<JObject>(json);
			return new JsonObject(values);
		}
		
		public static T FromJson<T>(string json){
			return JsonConvert.DeserializeObject<T>(json);
		}

		public static JsonObject Create(){
			return new JsonObject(new JObject());
		}
		
		public static JsonObject Create(object obj)
		{
			var jObject = JObject.FromObject(obj, _jsonSerializer);
			return new JsonObject(jObject);
		}

		public static JsonObject CreateFrom(JObject jObject){
			return new JsonObject(jObject);
		}
		
		private JsonObject(JObject jObject){
			_jObject = jObject;
		}

		public JsonObject Add<T>(string key, T value){
			ValidateDuplicatedKeyInRepository(_jObject, key);
			var updatedJObject = _jObject;

			var objectValue = (object) value;

			if (objectValue is JsonObject) {
				var jsonObject = (JsonObject) objectValue;
				updatedJObject.Add(key, jsonObject.GetJObject());
			}
			else if (objectValue is JsonArrayObject) {
				var jsonObject = (JsonArrayObject) objectValue;
				updatedJObject.Add(key, jsonObject.GetJArray());
			}
			else if (objectValue is int || objectValue is float || objectValue is DateTime ||
			         objectValue is char || objectValue is long || objectValue is TimeSpan ||
			         objectValue is Uri || objectValue is string || objectValue is bool || objectValue is IEnumerable) {
				updatedJObject.Add(key, JToken.FromObject(objectValue, _jsonSerializer));
			}
			else {
				updatedJObject.Add(key, JObject.FromObject(objectValue, _jsonSerializer));
			}

			return CreateFrom(updatedJObject);
		}

		public string GetString(string key){
			return GetObject<string>(key);
		}

		public int GetInt(string key){
			return (int) GetObject<long>(key);
		}

		public bool GetBool(string key){
			return GetObject<bool>(key);
		}

		public float GetFloat(string key){
			return (float) GetObject<double>(key);
		}

		public DateTime GetDateTime(string key){
			return GetObject<DateTime>(key);
		}

		public JsonObject GetJsonObject(string key){
			return new JsonObject(GetObject<JObject>(key));
		}

		public TimeSpan GetTimeSpan(string key){
			return GetObject<TimeSpan>(key);
		}

		public long GetLong(string key){
			return GetObject<long>(key);
		}

		public Uri GetUri(string key){
			return GetObject<Uri>(key);
		}

		public char GetChar(string key){
			return GetObject<char>(key);
		}

		public JsonArray<T> GetJsonArray<T>(string key){
			return JsonArray<T>.CreateFrom(GetObject<JArray>(key));
		}

		public T GetObject<T>(string key){
			ValidateKeyExistsInRepository(_jObject, key);
			T objectOfType;

			try {				
				objectOfType = _jObject[key].ToObject<T>(_jsonSerializer);
			}
			catch (JsonSerializationException e) {
				throw new InvalidObjectTypeException(key);
			}

			return objectOfType;
		}

		private void ValidateDuplicatedKeyInRepository(JObject repository, string key){
			if (repository[key] != null)
				throw new DuplicatedKeyInJsonObjectException(key);
		}

		private void ValidateKeyExistsInRepository(JObject repository, string key){
			if (repository[key] == null)
				throw new ObjectNotFoundException(key);
		}

		public IEnumerator<KeyValuePair<string, object>> GetEnumerator(){
			foreach (var jObject in _jObject) {
				yield return new KeyValuePair<string, object>(jObject.Key, jObject.Value.ToObject<object>());
			}
		}

		IEnumerator IEnumerable.GetEnumerator(){
			return GetEnumerator();
		}

		public bool ContainsKey(string key){
			return _jObject[key] != null;
		}

		public JObject GetJObject(){
			return _jObject;
		}

		public override string ToString(){
			var jsonSerializerSettings = new JsonSerializerSettings {
				ContractResolver = new CamelCasePropertyNamesContractResolver(),
				DateFormatHandling = DateFormatHandling.IsoDateFormat
			};
			return JsonConvert.SerializeObject(_jObject, jsonSerializerSettings);
		}

		public void Remove(string key)
		{
			_jObject.Remove(key);
		}
	}
}