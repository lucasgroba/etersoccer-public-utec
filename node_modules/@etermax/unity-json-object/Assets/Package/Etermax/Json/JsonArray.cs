using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Etermax.Json.ContractResolvers;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using UnityEngine;

namespace Etermax.Json{
	public abstract class JsonArrayObject{
		public abstract JArray GetJArray();
	}

	public class JsonArray<T> : JsonArrayObject, IEnumerable<T>{
		private readonly JArray _array;

		private readonly JsonSerializer _jsonSerializer = new JsonSerializer {
			ContractResolver = new CamelCasePropertyNamesContractResolver(),
			DateFormatHandling = DateFormatHandling.IsoDateFormat,
			DateFormatString = "o"
		};

		public static JsonArray<T> FromJson(string json){
			var values = JsonConvert.DeserializeObject<JArray>(json);
			return CreateFrom(values);
		}
		
		public static JsonArray<T> FromJson(string json, JsonSerializerSettings jsonSerializerSettings){
			var values = JsonConvert.DeserializeObject<JArray>(json, jsonSerializerSettings);
			return CreateFrom(values);
		}

		public override JArray GetJArray(){
			return _array;
		}

		public static JsonArray<T> Create(){
			return CreateFrom(new JArray());
		}

		public static JsonArray<T> CreateFrom(JArray jArray){
			return new JsonArray<T>(jArray);
		}

		public JsonArray(JArray jArray){
			_array = jArray;
		}

		public T this[int i] {
			get {
				if (typeof(JsonArrayObject).IsAssignableFrom(typeof(T))) {
					var jArray = _array.ElementAt(i).Value<JArray>();
					var jsonArray = (T) Activator.CreateInstance(typeof(T), jArray);
					return jsonArray;
				}

				if (typeof(JsonObject).IsAssignableFrom(typeof(T))) {
					var jObject = _array.ElementAt(i).ToObject<JObject>();
					var jsonObject = JsonObject.CreateFrom(jObject);
					return (T) Convert.ChangeType(jsonObject, typeof(T));
				}
				else {
					return _array.ElementAt(i).ToObject<T>(_jsonSerializer);
				}
			}
		}

		public JsonArray<T> Add(T value){
			var updatedArray = _array;
			var objectValue = (object) value;
			if (objectValue is JsonObject) {
				var jsonObject = (JsonObject) objectValue;
				updatedArray.Add(jsonObject.GetJObject());
			}
			else if (objectValue is JsonArrayObject) {
				var jsonObject = (JsonArrayObject) objectValue;
				updatedArray.Add(jsonObject.GetJArray());
			}
			else {
				updatedArray.Add(JToken.FromObject(objectValue, _jsonSerializer));
			}
			
			return CreateFrom(updatedArray);
		}

		public bool Contains(T value){
			var objectValue = (object) value;
			if (objectValue is JsonObject) {
				var jsonObject = (JsonObject) objectValue;
				return _array.Contains(jsonObject.GetJObject());
			}

			if (objectValue is JsonArrayObject) {
				var jsonObject = (JsonArrayObject) objectValue;
				return _array.Contains(jsonObject.GetJArray());
			}

			if (objectValue is DateTime) {
				var dateTime = (DateTime) objectValue;
				return _array.Any(j => j.Value<DateTime>().Date.Equals(dateTime.Date));
			}

			return _array.Any(j => j.ToString().Equals(objectValue.ToString()));
		}

		public IEnumerator<T> GetEnumerator(){
			if (typeof(JsonArrayObject).IsAssignableFrom(typeof(T))) {
				return _array.Select(val => {
					var jArray = val.ToObject<JArray>();
					return (T) Activator.CreateInstance(typeof(T), jArray);
				}).GetEnumerator();
			}

			if (typeof(JsonObject).IsAssignableFrom(typeof(T))) {
				return _array.Select(val => {
						var jsonObject = JsonObject.CreateFrom(val.ToObject<JObject>());
						return (T) Convert.ChangeType(jsonObject, typeof(T));
					}).GetEnumerator();
			}

			return _array.Select(val => val.ToObject<T>()).GetEnumerator();
		}

		public override string ToString(){
			var jsonSerializerSettings = new JsonSerializerSettings {
				ContractResolver = _jsonSerializer.ContractResolver,
				DateFormatString = _jsonSerializer.DateFormatString,
				DateFormatHandling = _jsonSerializer.DateFormatHandling
			};
			return JsonConvert.SerializeObject(_array, jsonSerializerSettings);
		}

		IEnumerator IEnumerable.GetEnumerator(){
			return GetEnumerator();
		}
	}
}