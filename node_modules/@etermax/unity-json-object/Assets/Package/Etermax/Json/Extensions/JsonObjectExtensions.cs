using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json.Linq;

namespace Etermax.Json.Extensions {
    public static class JsonObjectExtensions {
        
        public static IDictionary<string, object> ToDictionary(this JsonObject json) {
            return json.GetJObject().ToDictionary();
        }
        
        private static IDictionary<string, object> ToDictionary(this JObject json) {
            var propertyValuePairs = json.ToObject<Dictionary<string, object>>();
            ProcessJObjectProperties(propertyValuePairs);
            ProcessJArrayProperties(propertyValuePairs);
            return propertyValuePairs;
        }

        private static List<object> ToArray(this JArray array) {
            return array.ToObject<object[]>()
                .Select(ProcessArrayEntry)
                .ToList();
        }

        private static void ProcessJObjectProperties(IDictionary<string, object> propertyValuePairs) {
            var objectPropertyNames = (from property in propertyValuePairs
                let propertyName = property.Key
                let value = property.Value
                where value is JObject
                select propertyName).ToList();

            foreach (var propertyName in objectPropertyNames) 
                propertyValuePairs[propertyName] = ToDictionary((JObject) propertyValuePairs[propertyName]);
        }

        private static void ProcessJArrayProperties(IDictionary<string, object> propertyValuePairs) {
            var arrayPropertyNames = (from property in propertyValuePairs
                let propertyName = property.Key
                let value = property.Value
                where value is JArray
                select propertyName).ToList();

            arrayPropertyNames.ForEach(propertyName =>
                propertyValuePairs[propertyName] = ToArray((JArray) propertyValuePairs[propertyName]));
        }

        private static object ProcessArrayEntry(object value) {
            var array = value as JArray;
            if (array != null) 
                return ToArray(array);
            
            var jObject = value as JObject;
            if (jObject != null) 
                return ToDictionary(jObject);
            
            return value;
        }
    }
}