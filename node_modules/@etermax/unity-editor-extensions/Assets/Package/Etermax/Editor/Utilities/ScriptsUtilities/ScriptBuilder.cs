using System;
using System.Collections.Generic;

namespace Etermax.EditorExtensions.ScriptUtilities.Builder
{
    public class ScriptBuilder
    {
        private string _folderPath;
        private string _className;
        private string _classBody;
        private string _classNamespace = "";
        private string _classBaseClass = "";
        private bool _isStatic = false;
        private bool _isInterface = false;
        private List<string> _libraries = new List<string>();
        private List<string> _interfaces = new List<string>();

        private ScriptBuilder()
        {
        }

        public static ScriptBuilder New()
        {
            return new ScriptBuilder();
        }

        public ScriptBuilder FolderPath(string folderPath)
        {
            _folderPath = folderPath;
            return this;
        }

        public ScriptBuilder Name(string name)
        {
            _className = name;
            return this;
        }

        public ScriptBuilder Body(string body)
        {
            _classBody = body;
            return this;
        }

        public ScriptBuilder Namespace(string path)
        {
            _classNamespace = path;
            return this;
        }

        public ScriptBuilder AsStatic()
        {
            _isStatic = true;
            return this;
        }

        public ScriptBuilder AsInterface()
        {
            _isInterface = true;
            return this;
        }

        public ScriptBuilder BaseClass(string baseClassName)
        {
            _classBaseClass = baseClassName;
            return this;
        }

        public ScriptBuilder Libraries(List<string> libraries)
        {
            _libraries = new List<string>(libraries);
            return this;
        }

        public ScriptBuilder Interfaces(List<string> interfaces)
        {
            _interfaces = new List<string>(interfaces);
            return this;
        }

        public bool Create()
        {
            if (AnyInvalidValue())
            {
                throw new Exception("ClassName, ClassBody or FolderPath Missing");
            }

            return ScriptUtilities.CreateCSharpScript(
                _folderPath,
                _className,
                _classBody,
                _classNamespace,
                _classBaseClass,
                _isStatic,
                _isInterface,
                _libraries,
                _interfaces);
        }

        private bool AnyInvalidValue()
        {
            return string.IsNullOrEmpty(_className) ||
                   string.IsNullOrEmpty(_classBody) ||
                   string.IsNullOrEmpty(_folderPath);
        }
    }
}