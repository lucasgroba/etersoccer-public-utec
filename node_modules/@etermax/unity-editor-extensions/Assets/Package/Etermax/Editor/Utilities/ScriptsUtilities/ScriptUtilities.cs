using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Etermax.EditorExtensions.Utilities;
using UnityEditor;

namespace Etermax.EditorExtensions.ScriptUtilities
{
    public static class ScriptUtilities
    {
        public static bool CreateCSharpScript(
            string folderPath,
            string className,
            string classBody,
            string classNamespace = "",
            string baseClass = "",
            bool isStaticClass = false,
            bool isInterface = false,
            List<string> libraries = null,
            List<string> interfaces = null)
        {
            if (isInterface && isStaticClass)
                throw new Exception("A Script cannot be an interface and static at the same time.");

            var filePath = folderPath + className + ".cs";

            if (CheckIfFileExists(filePath))
            {
                EditorUtility.DisplayDialog("Script",
                    "File in path: " + filePath + " already exists, it won't be overwrite.", "Ok");
                return false;
            }

            EditorUtilities.Log("Creating Script in: " + filePath);
            EditorUtilities.Log("Please wait until the compiler has finished...");

            var usings = UsingsAsString(libraries);
            var fileNamespace = string.IsNullOrEmpty(classNamespace)
                ? string.Empty
                : "namespace " + classNamespace + "\n{";

            var space = string.IsNullOrEmpty(fileNamespace) ? "" : "	";
            var classDefinition = "public class " + className;
            if (isStaticClass)
            {
                classDefinition = "public static class " + className;
            }

            if (isInterface)
            {
                classDefinition = "public interface " + className;
            }

            classDefinition += string.IsNullOrEmpty(baseClass) ? string.Empty : " : " + baseClass;

            if (interfaces != null)
            {
                var concatedInterfaces = interfaces.Aggregate("", (acc, current) => acc + ", " + current);
                classDefinition += concatedInterfaces;
            }

            using (var outfile = new StreamWriter(filePath))
            {
                if (libraries.Any())
                    outfile.WriteLine(usings);
                if (!string.IsNullOrEmpty(fileNamespace))
                    outfile.WriteLine(fileNamespace);
                outfile.WriteLine(space + classDefinition);
                outfile.WriteLine(space + classBody);
                if (!string.IsNullOrEmpty(fileNamespace))
                    outfile.WriteLine("}");
            }

            return true;
        }

        private static bool CheckIfFileExists(string filePath)
        {
            return File.Exists(filePath);
        }

        public static string UsingsAsString(IEnumerable<string> libraries)
        {
            return libraries
                .Distinct()
                .Select(library => "using " + library + ";")
                .Aggregate("", (acc, current) => acc + current + "\n");
        }

        public static Type GetClassFromAssembly(string className)
        {
            return AppDomain.CurrentDomain.GetAssemblies()
                .SelectMany(assembly => assembly.GetTypes())
                .FirstOrDefault(type => type.IsClass && type.Name == className);
        }

        public static bool ClassExists(string className)
        {
            return AppDomain.CurrentDomain.GetAssemblies()
                .SelectMany(assembly => assembly.GetTypes())
                .Any(type => type.IsClass && type.Name == className);
        }

        public static Type GetInterfaceFromAssembly(string interfaceName)
        {
            return AppDomain.CurrentDomain.GetAssemblies()
                .SelectMany(assembly => assembly.GetTypes())
                .FirstOrDefault(type => type.IsInterface && type.Name == interfaceName);
        }

        public static bool InterfaceExists(string interfaceName)
        {
            return AppDomain.CurrentDomain.GetAssemblies()
                .SelectMany(assembly => assembly.GetTypes())
                .Any(type => type.IsInterface && type.Name == interfaceName);
        }
    }
}