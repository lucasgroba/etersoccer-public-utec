using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using Etermax.EditorExtensions.Data;
using UnityEditor;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;

namespace Etermax.EditorExtensions.Utilities
{
    public static class EditorUtilities
    {
        private const string EditorDataPath = "Assets/EtermaxFramework_Temp/Editor/Temp/temp-data.asset";
        private const string EditorDataFolderPath = "Assets/EtermaxFramework_Temp/Editor/Temp";
        private const string EditorTemporalRootFolderName = "EtermaxFramework_Temp";

        public static Canvas GetOrInstantiateCanvas()
        {
            var canvas = GameObject.FindObjectOfType<Canvas>();
            return canvas != null ? canvas : CreateCanvasSystem();
        }

        private static Canvas CreateCanvasSystem()
        {
            var canvasGameObject = new GameObject("Canvas");
            var canvas = canvasGameObject.AddComponent<Canvas>();
            canvas.renderMode = RenderMode.ScreenSpaceOverlay;

            var canvasScaler = canvasGameObject.AddComponent<CanvasScaler>();
            canvasScaler.uiScaleMode = CanvasScaler.ScaleMode.ScaleWithScreenSize;
            canvasScaler.referenceResolution = new Vector2(1536, 2048);
            canvasScaler.screenMatchMode = CanvasScaler.ScreenMatchMode.MatchWidthOrHeight;
            canvasScaler.matchWidthOrHeight = 1;
            canvasScaler.referencePixelsPerUnit = 100;

            canvasGameObject.AddComponent<GraphicRaycaster>();

            var eventSystemGameObject = new GameObject("EventSystem");
            eventSystemGameObject.transform.SetParent(canvasGameObject.transform);
            eventSystemGameObject.AddComponent<EventSystem>();
            eventSystemGameObject.AddComponent<StandaloneInputModule>();

            return canvas;
        }

        public static void ExportPackage(string assetToExport, string fileName, string path,
            ExportPackageOptions exportPackageOptions = ExportPackageOptions.Recurse)
        {
            var filePath = Path.Combine(path, fileName) + ".unitypackage";
            Debug.Log("Exporting UnityPackage to " + filePath);
            AssetDatabase.ExportPackage(assetToExport, filePath, exportPackageOptions);
        }

        public static void ImportPackage(string packagePath, bool interactive)
        {
            Debug.Log("Importing UnityPackage");
            AssetDatabase.ImportPackage(packagePath, interactive);
        }

        public static void CreateFolderPathFromAssets(string path)
        {
            Directory.CreateDirectory(path);
        }

        public static List<T> LoadPrefabOfType<T>() where T : MonoBehaviour
        {
            return AssetDatabase.FindAssets("t:Prefab")
                .Select(AssetDatabase.GUIDToAssetPath)
                .Select(AssetDatabase.LoadAssetAtPath<T>)
                .Where(type => type != null).ToList();
        }

        public static void ClearConsole()
        {
            var logEntries = Type.GetType("UnityEditor.LogEntries, UnityEditor.dll");
            if (logEntries == null) return;
            var clearMethod = logEntries.GetMethod("Clear", BindingFlags.Static | BindingFlags.Public);
            if (clearMethod != null)
                clearMethod.Invoke(null, null);
        }


        public static void SaveEditorData(EditorData editorData)
        {
            CreateFolderPathFromAssets(EditorDataFolderPath);
            AssetDatabase.CreateAsset(editorData, EditorDataPath);
            AssetDatabase.SaveAssets();
        }

        public static EditorData LoadEditorData()
        {
            var editorData = AssetDatabase.LoadAssetAtPath<EditorData>(EditorDataPath);
            if (editorData != null)
                editorData.OnLoad();
            return editorData;
        }

        public static void DeleteEditorData()
        {
            if (!EditorDataExists()) return;
            Directory.Delete(Application.dataPath + Path.DirectorySeparatorChar + EditorTemporalRootFolderName, true);
        }

        public static bool EditorDataExists()
        {
            return File.Exists(EditorDataPath);
        }

        public static void Log(string message)
        {
            Debug.Log("[Etermax Framework]: " + message);
        }
    }
}