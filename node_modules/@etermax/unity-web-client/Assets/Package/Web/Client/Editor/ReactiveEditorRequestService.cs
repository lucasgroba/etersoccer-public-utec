using System.Collections;
using System.Collections.Generic;
using System.Text;
using Etermax.Web.Client;
using Etermax.Web.Client.Error;
using Etermax.Web.Client.Methods;
using UniRx;
using UnityEditor;
using UnityEngine.Networking;
using System;
using System.Linq;
using Etermax.Web.Client.Loggers;

public class ReactiveEditorRequestService : IRequestService{
	private IObserver<HttpWebResponse> _responseObserver;
	private UnityWebRequest _unityWebRequest;
	private ILogger _logger;

	public ReactiveEditorRequestService(ILogger logger) {
		_logger = logger;
	}
	
	public IObservable<HttpWebResponse> Execute(IHttpWebRequest httpWebRequest){
		
		return Observable.Create<HttpWebResponse>(emitter => {
			_responseObserver = emitter;
			LogRequest(httpWebRequest);
			_unityWebRequest = GetUnityWebRequestFor(httpWebRequest);
			ConfigureTimeoutAndHeaders(_unityWebRequest, httpWebRequest);
			EditorApplication.update += UpdateEditor;
			_unityWebRequest.SendWebRequest();                                  
			return Disposable.Empty;
		});
	}	
	        
	private void LogRequest(IHttpWebRequest request){
		var method = request.GetMethod() + " => " + request.GetAbsUrl();
		var headers = request.GetHeaders().Any()
			? "\nHeaders | " + request.GetHeaders()
				  .Aggregate("", (acc, pair) => acc + pair.Key + " : " + pair.Value)
			: "";
		var body = string.IsNullOrEmpty(request.GetBody()) ? "" : "\nPayload | " + request.GetBody();

		_logger.Write("Etermax.Web.Client", method + headers + body);
	}

	private void UpdateEditor(){
		if (!_unityWebRequest.isDone)
			return;
		
		if (_unityWebRequest.isNetworkError) {
			_responseObserver.OnError(PrepareNetworkErrorResponse(_unityWebRequest.error));
		}
		else if (_unityWebRequest.responseCode < 400) {
			_responseObserver.OnNext(PrepareResponse(_unityWebRequest));
			_responseObserver.OnCompleted();
		}
		else {
			_responseObserver.OnError(PrepareHttpErrorResponse(_unityWebRequest));
		}
		
		EditorApplication.update -= UpdateEditor;
	}

	private UnityWebRequest GetUnityWebRequestFor(IHttpWebRequest httpWebRequest){
		switch (httpWebRequest.GetMethod()) {
			case HttpMethod.Get:
				return UnityWebRequest.Get(httpWebRequest.GetAbsUrl());
			case HttpMethod.Delete:
				return UnityWebRequest.Delete(httpWebRequest.GetAbsUrl());
			case HttpMethod.Post:
				return CreateUnityRequestRequestWithPayloadFrom(httpWebRequest, UnityWebRequest.kHttpVerbPOST);
			case HttpMethod.Put:
				return CreateUnityRequestRequestWithPayloadFrom(httpWebRequest, UnityWebRequest.kHttpVerbPUT);
			default: throw new HttpMethodNotSupportedException(httpWebRequest.GetMethod());
		}
	}

	private static UnityWebRequest CreateUnityRequestRequestWithPayloadFrom(IHttpWebRequest httpWebRequest, string method){
		var requestWithBody = new UnityWebRequest(httpWebRequest.GetAbsUrl()) {
			uploadHandler = string.IsNullOrEmpty(httpWebRequest.GetBody())
				? null
				: new UploadHandlerRaw(Encoding.UTF8.GetBytes(httpWebRequest.GetBody())),
			downloadHandler = new DownloadHandlerBuffer(),
			method = method
		};
		requestWithBody.SetRequestHeader("Content-Type", "application/json;charset=UTF-8");
		return requestWithBody;
	}

	private void ConfigureTimeoutAndHeaders(UnityWebRequest unityWebRequest, IHttpWebRequest httpWebRequest){
		unityWebRequest.timeout = httpWebRequest.GetTimeout();
		AddHeaders(unityWebRequest, httpWebRequest.GetHeaders());
	}

	private static void AddHeaders(UnityWebRequest unityWebRequest, Dictionary<string, string> headers){
		foreach (var kvp in headers)
			unityWebRequest.SetRequestHeader(kvp.Key, kvp.Value);
	}

	private IEnumerator Execute(UnityWebRequest unityWebRequest){
		yield return unityWebRequest.SendWebRequest();

		if (unityWebRequest.isNetworkError) {
			_responseObserver.OnError(PrepareNetworkErrorResponse(unityWebRequest.error));
		}
		else if (unityWebRequest.responseCode < 400) {
			_responseObserver.OnNext(PrepareResponse(unityWebRequest));
			_responseObserver.OnCompleted();
		}
		else {
			_responseObserver.OnError(PrepareHttpErrorResponse(unityWebRequest));
		}
	}

	private HttpWebResponse PrepareResponse(UnityWebRequest unityWebRequest){
		var responseCode = unityWebRequest.responseCode;
		var downloadHandler = unityWebRequest.downloadHandler;
		var body = default(string);
		var data = default(byte[]);

		if (downloadHandler != null) {
			body = downloadHandler.text;
			data = downloadHandler.data;
		}

		return new HttpWebResponse((int) responseCode, body, data, unityWebRequest.GetResponseHeaders());
	}

	private HttpWebResponseError PrepareHttpErrorResponse(UnityWebRequest unityWebRequest){
		var responseCode = unityWebRequest.responseCode;
		var downloadHandler = unityWebRequest.downloadHandler;
		var body = default(string);
		var data = default(byte[]);

		if (downloadHandler != null) {
			body = downloadHandler.text;
			data = downloadHandler.data;
		}

		return new HttpWebResponseError((int) responseCode, body, data,
			unityWebRequest.GetResponseHeaders());
	}

	private NetworkException PrepareNetworkErrorResponse(string description){
		return new NetworkException(description);
	}
}