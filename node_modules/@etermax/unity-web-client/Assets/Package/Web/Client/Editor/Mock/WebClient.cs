using System;
using System.Collections.Generic;
using Etermax.Web.Client.Methods;
using NSubstitute;

namespace Etermax.Web.Client.Editor.Mocks
{
    public class WebClient : IWebClient
    {
        private HttpWebResponse _response;

        readonly Dictionary<HttpMethod, WebClientMethodCallInfo> _calls =
            new Dictionary<HttpMethod, WebClientMethodCallInfo>();

        private List<IRequestProxy> _requestProxies = new List<IRequestProxy>();
        private IResponseProxy _responseProxy;

        private WebClient()
        {
        }

        public static WebClient Mock()
        {
            return new WebClient();
        }

        public void SetRequestProxy(IRequestProxy requestProxy)
        {
            _requestProxies.Add(requestProxy);
        }

        public void SetRequestProxies(List<IRequestProxy> requestProxies)
        {
            _requestProxies = requestProxies;
        }

        public void SetResponseProxy(IResponseProxy responseProxy)
        {
            _responseProxy = responseProxy;
        }

        public IHttpWebRequest Get(string uri)
        {
            WebClientMethodCallInfo call;
            _calls.TryGetValue(HttpMethod.Get, out call);
            if (call == null)
                throw new WrongWebClientMethod(string.Format("No Response for Get with {0} Try using WhenGet({0})", uri));

            if (!call.MatchesWithArgument(uri))
                throw new Exception(string.Format("Arguments does not match with {0} Try WhenGet({0})", uri));

            return call.Response();
        }

        public StubHttpWebRequest WhenGet(string uri)
        {
            var request = new StubHttpWebRequest(this).WithUrl(uri);
            var call = new WebClientMethodCallInfo(this, HttpMethod.Get, uri, request);
            _calls.Add(call.Method, call);
            return request;
        }

        public IHttpWebRequest Post(string uri)
        {
            WebClientMethodCallInfo call;
            _calls.TryGetValue(HttpMethod.Post, out call);
            if (call == null)
                throw new WrongWebClientMethod(string.Format("No Response for Post with {0} Try using WhenPost({0})", uri));

            if (!call.MatchesWithArgument(uri))
                throw new Exception(string.Format("Arguments does not match with {0} Try WhenPost({0})", uri));

            return call.Response();
        }

        public StubHttpWebRequest WhenPost(string uri)
        {
            var request = new StubHttpWebRequest(this).WithUrl(uri);
            var call = new WebClientMethodCallInfo(this, HttpMethod.Post, uri, request);
            _calls.Add(call.Method, call);
            return request;
        }

        public IHttpWebRequest Delete(string uri)
        {
            WebClientMethodCallInfo call;
            _calls.TryGetValue(HttpMethod.Delete, out call);
            if (call == null)
                throw new WrongWebClientMethod(string.Format("No Response for Delete with {0} Try using WhenDelete({0})", uri));

            if (!call.MatchesWithArgument(uri))
                throw new Exception(string.Format("Arguments does not match with {0} Try WhenDelete({0})", uri));

            return call.Response();
        }

        public StubHttpWebRequest WhenDelete(string uri)
        {
            var request = new StubHttpWebRequest(this).WithUrl(uri);
            var call = new WebClientMethodCallInfo(this, HttpMethod.Delete, uri, request);
            _calls.Add(call.Method, call);
            return request;
        }

        public IHttpWebRequest Put(string uri)
        {
            WebClientMethodCallInfo call;
            _calls.TryGetValue(HttpMethod.Put, out call);
            if (call == null)
                throw new WrongWebClientMethod(string.Format("No Response for Put with {0} Try using WhenPut({0})", uri));

            if (!call.MatchesWithArgument(uri))
                throw new Exception(string.Format("Arguments does not match with {0} Try WhenPut({0})", uri));

            return call.Response();
        }

        public StubHttpWebRequest WhenPut(string uri)
        {
            var request = new StubHttpWebRequest(this).WithUrl(uri);
            var call = new WebClientMethodCallInfo(this, HttpMethod.Put, uri, request);
            _calls.Add(call.Method, call);
            return request;
        }
    }    

    public class WrongWebClientMethod : Exception
    {
        public WrongWebClientMethod(string format)
        {
        }
    }
}