using System.Collections.Generic;
using Etermax.Web.Client;
using Etermax.Web.Client.Loggers;
using Etermax.Web.Client.Methods;
using Etermax.Web.Utilities;

public class ReactiveEditorWebClient : IWebClient
{
    private ILogger _logger;
    private List<IRequestProxy> _requestProxies = new List<IRequestProxy>();
    private IResponseProxy _responseProxy;

    private ReactiveEditorWebClient(ILogger logger)
    {
        if (logger == null)
            logger = new EmptyLogger();
        _logger = logger;
    }

    public static ReactiveEditorWebClient Create()
    {
        return new ReactiveEditorWebClient(null);
    }

    public static ReactiveEditorWebClient Create(ILogger logger)
    {
        return new ReactiveEditorWebClient(logger);
    }

    public void SetRequestProxy(IRequestProxy requestProxy)
    {
        _requestProxies.Add(requestProxy);
    }

    public void SetRequestProxies(List<IRequestProxy> requestProxies)
    {
        _requestProxies = requestProxies;
    }

    public void SetResponseProxy(IResponseProxy responseProxy)
    {
        _responseProxy = responseProxy;
    }

    public IHttpWebRequest Get(string uri)
    {
        return HttpWebRequest.Get(uri, new ReactiveEditorRequestService(_logger))
            .SetRequestProxy(_requestProxies).SetResponseProxy(_responseProxy);
    }

    public IHttpWebRequest Post(string uri)
    {
        return HttpWebRequest.Post(uri, new ReactiveEditorRequestService(_logger))
            .SetRequestProxy(_requestProxies).SetResponseProxy(_responseProxy);
    }

    public IHttpWebRequest Delete(string uri)
    {
        return HttpWebRequest.Delete(uri, new ReactiveEditorRequestService(_logger))
            .SetRequestProxy(_requestProxies).SetResponseProxy(_responseProxy);
    }

    public IHttpWebRequest Put(string uri)
    {
        return HttpWebRequest.Put(uri, new ReactiveEditorRequestService(_logger))
            .SetRequestProxy(_requestProxies).SetResponseProxy(_responseProxy);
    }
}