using System;
using System.Collections.Generic;
using System.Linq;
using Etermax.Json;
using Etermax.Web.Client.Error;
using Etermax.Web.Client.Methods;
using UniRx;

namespace Etermax.Web.Client.Editor.Mocks
{
    public class StubHttpWebRequest : IHttpWebRequest
    {
        private readonly Dictionary<string, string> _queryParams = new Dictionary<string, string>();
        private readonly Dictionary<string, string> _headers = new Dictionary<string, string>();
        private readonly Dictionary<string, string> _pathParams = new Dictionary<string, string>();
        private readonly IWebClient _webClient;
        private Func<IObservable<HttpWebResponse>> _response;
        private string _uri;
        private int _timeout;
        private HttpMethod _method;
        private string _body;
        private bool _useHttpContinue;
        private List<IRequestProxy> _requestProxies = new List<IRequestProxy>();
        private IResponseProxy _responseProxy;
        private ICertificateHandler _certificateHandler;

        public StubHttpWebRequest(IWebClient webClient)
        {
            _webClient = webClient;
        }

        public bool HasCertificateHandler
        {
            get { return _certificateHandler != null; }
        }

        public string GetRawUrl()
        {
            return _uri;
        }

        public string GetUrl()
        {
            return UrlWithParams();
        }

        public string GetAbsUrl()
        {
            var queryParams = string.Join("&",
                GetQueryParams().Select(kvp => string.Format("{0}={1}", kvp.Key, kvp.Value)).ToArray());
            return UrlWithParams() + (queryParams != string.Empty ? "?" + queryParams : "");
        }

        private string UrlWithParams()
        {
            var url = _uri;
            foreach (var param in _pathParams)
            {
                url = url.Replace(param.Key, param.Value);
            }

            return url;
        }

        public Dictionary<string, string> GetPathParams()
        {
            return _pathParams;
        }

        public string GetBody()
        {
            return _body;
        }

        public HttpMethod GetMethod()
        {
            return _method;
        }

        public int GetTimeout()
        {
            return _timeout;
        }

        public Dictionary<string, string> GetHeaders()
        {
            return _headers;
        }

        public Dictionary<string, string> GetQueryParams()
        {
            return _queryParams;
        }

        public bool GetUseHttpContinue()
        {
            return _useHttpContinue;
        }

        public ICertificateHandler GetCertificateHandler()
        {
            return _certificateHandler;
        }

        public IHttpWebRequest Url(string uri)
        {
            if (_uri != uri)
                throw new Exception(string.Format("No matching Url with {0}. Try using WithUrl({0}) or Url({1})", uri,
                    _uri));
            return this;
        }

        public StubHttpWebRequest WithUrl(string uri)
        {
            _uri = uri;
            return this;
        }

        public IHttpWebRequest Method(HttpMethod method)
        {
            if (_method != method)
                throw new Exception(string.Format("No matching Method with {0}. Try using WithUrl({0} or Method({1})",
                    method, _method));
            return this;
        }

        public StubHttpWebRequest WithMethod(HttpMethod method)
        {
            _method = method;
            return this;
        }

        public IHttpWebRequest AddBearerAuthentication(string token)
        {
            if (_headers.ContainsKey("Authorization"))
            {
                var value = _headers["Authorization"];
                if (string.IsNullOrEmpty(value) || value != string.Format("Bearer {0}", token))
                {
                    throw new Exception(string.Format(
                        "No matching PathParam Value with {0}. Try using WithBearerAuthentication({0}) or AddBearerAuthentication({1})",
                        token, value.Remove(0, 6)));
                }
            }
            else
            {
                throw new Exception(string.Format(
                    "No matching Bearer Authentication with {0}. Try using WithBearerAuthentication({0}) or Remove AddBearerAuthentication({0})",
                    token));
            }

            return this;
        }

        public StubHttpWebRequest WithBearerAuthentication(string token)
        {
            _headers.Add("Authorization", string.Format("Bearer {0}", token));
            return this;
        }

        public IHttpWebRequest AddQueryParam(string paramName, string paramValue)
        {
            if (_queryParams.ContainsKey(paramName))
            {
                var value = _queryParams[paramName];
                if (string.IsNullOrEmpty(value) || value != paramValue)
                {
                    throw new Exception(string.Format(
                        "No matching QueryParam Value with {1}. Try using WithQueryParam({0},{1}) or AddQueryParam({0},{2})",
                        paramName, paramValue, value));
                }
            }
            else
            {
                throw new Exception(string.Format(
                    "No matching QueryParam Key with {0}. Try using WithQueryParam({0},{1}) or Removing AddQueryParam({0},{1})",
                    paramName, paramValue));
            }

            return this;
        }

        public StubHttpWebRequest WithQueryParam(string paramName, string paramValue)
        {
            _queryParams.Add(paramName, paramValue);
            return this;
        }

        public IHttpWebRequest ReplacePathParam(string key, string value)
        {
            if (_pathParams.ContainsKey(key))
            {
                var pathParam = _pathParams[key];
                if (string.IsNullOrEmpty(pathParam) || pathParam != value)
                {
                    throw new Exception(string.Format(
                        "No matching PathParam Value with {1}. Try using WithPathParam({0},{1}) or ReplacePathParam({0},{2})",
                        key, value, pathParam));
                }
            }
            else
            {
                throw new Exception(string.Format(
                    "No matching PathParam Key with {0}. Try using WithPathParam({0},{1}) or Removing ReplacePathParam({0},{1})",
                    key, value));
            }

            return this;
        }

        public StubHttpWebRequest WithPathParam(string key, string value)
        {
            _pathParams.Add(key, value);
            return this;
        }

        public IHttpWebRequest Timeout(int timeout)
        {
            if (_timeout != timeout)
                throw new Exception(string.Format(
                    "No matching Timeout with {0}. Try using WithTimeout({0}) or Timeout({1})", timeout, _timeout));
            return this;
        }

        public StubHttpWebRequest WithTimeout(int timeout)
        {
            _timeout = timeout;
            return this;
        }

        public IHttpWebRequest PutHeaders(string name, string value)
        {
            if (_headers.ContainsKey(name))
            {
                var headerValue = _headers[name];
                if (string.IsNullOrEmpty(headerValue) || headerValue != value)
                {
                    throw new Exception(string.Format(
                        "No matching Headers Value with {1}. Try using WithHeaders({0},{1}) or PutHeaders({0},{2})",
                        name, value, headerValue));
                }
            }
            else
            {
                throw new Exception(string.Format(
                    "No matching Headers Key with {0}. Try using WithHeaders({0},{1}) or Removing PutHeaders({0},{1})",
                    name, value));
            }

            return this;
        }

        public IHttpWebRequest PutHeaders(IDictionary<string, string> headers)
        {
            return new StubHttpWebRequest(_webClient);
        }

        public IHttpWebRequest UseHttpContinue()
        {
            if (!_useHttpContinue)
                throw new Exception(
                    "Is expected to hace enabled UseHttpContinue. You can try usign WithUseHttpContinue() in the stub or removing UseHttpContinue() in the request");

            return this;
        }

        public StubHttpWebRequest WithUseHttpContinue()
        {
            _useHttpContinue = true;
            return this;
        }

        public StubHttpWebRequest WithHeaders(string name, string value)
        {
            _headers.Add(name, value);
            return this;
        }

        public IObservable<HttpWebResponse> Send()
        {
            return VerifyAfterSendingResponse();
        }

        public IObservable<HttpWebResponse> Send(JsonObject jsonObject)
        {
            if (_body != jsonObject.ToString())
                throw new Exception(string.Format(
                    "No matching Json with {0}. Try using WithJsonObjectResponds({0}) or Send({1})", jsonObject,
                    _body));

            return VerifyAfterSendingResponse();
        }

        public IObservable<HttpWebResponse> Send<T>(JsonArray<T> jsonArray)
        {
            if (_body != jsonArray.ToString())
                throw new Exception(string.Format(
                    "No matching Json with {0}. Try using WithJsonArrayResponds({0}) or Send({1})", jsonArray,
                    _body));

            return VerifyAfterSendingResponse();
        }

        public IObservable<HttpWebResponse> Send(string json)
        {
            if (_body != json)
                throw new Exception(string.Format(
                    "No matching Json with {0}. Try using WithJsonResponds({0}) or Send({1})", json,
                    _body));

            return VerifyAfterSendingResponse();
        }

        public IObservable<HttpWebResponse> SendJsonObject(JsonObject jsonObject)
        {
            if (_body != jsonObject.ToString())
                throw new Exception(string.Format(
                    "No matching Json with {0}. Try using WithJsonObjectResponds({0}) or SendJsonObject({1})",
                    jsonObject,
                    _body));

            return VerifyAfterSendingResponse();
        }

        public IObservable<HttpWebResponse> SendJsonArray<T>(JsonArray<T> jsonArray)
        {
            if (_body != jsonArray.ToString())
                throw new Exception(string.Format(
                    "No matching Json with {0}. Try using WithJsonArrayResponds({0}) or SendJsonArray({1})", jsonArray,
                    _body));

            return VerifyAfterSendingResponse();
        }

        public IObservable<HttpWebResponse> SendJson(string json)
        {
            if (_body != json)
                throw new Exception(string.Format(
                    "No matching Json with {0}. Try using WithJsonResponds({0}) or SendJson({1})", json,
                    _body));

            return VerifyAfterSendingResponse();
        }

        public IHttpWebRequest SetRequestProxy(IRequestProxy requestProxy)
        {
            _requestProxies.Add(requestProxy);
            return this;
        }

        public IHttpWebRequest SetRequestProxy(List<IRequestProxy> requestProxies)
        {
            requestProxies.ForEach(proxy => _requestProxies.Add(proxy));
            return this;
        }

        public IHttpWebRequest SetResponseProxy(IResponseProxy responseProxy)
        {
            _responseProxy = responseProxy;
            return this;
        }

        public IHttpWebRequest SetCertificateHandler(ICertificateHandler certificateHandler)
        {
            _certificateHandler = certificateHandler;
            return this;
        }

        private IObservable<HttpWebResponse> VerifyAfterSendingResponse()
        {
            return _response()
                .SelectMany(webResponse => webResponse.StatusCode >= 400
                    ? Observable.Throw<HttpWebResponse>(PrepareHttpWebResponseErrorFrom(webResponse))
                    : Observable.Return(webResponse)
                );
        }

        private HttpWebResponseError PrepareHttpWebResponseErrorFrom(HttpWebResponse expectedResponse)
        {
            return new HttpWebResponseError(expectedResponse.StatusCode, _body,
                expectedResponse.RawData, expectedResponse.Headers);
        }

        public IWebClient Responds(Func<IObservable<HttpWebResponse>> handler)
        {
            _response = handler;
            return _webClient;
        }

        public IWebClient WithJsonResponds(string json, Func<IObservable<HttpWebResponse>> handler)
        {
            _body = json;
            _response = handler;
            return _webClient;
        }

        public IWebClient WithJsonObjectResponds(JsonObject jsonObject, Func<IObservable<HttpWebResponse>> handler)
        {
            _body = jsonObject.ToString();
            _response = handler;
            return _webClient;
        }

        public IWebClient WithJsonArrayResponds<T>(JsonArray<T> jsonArray, Func<IObservable<HttpWebResponse>> handler)
        {
            _body = jsonArray.ToString();
            _response = handler;
            return _webClient;
        }
    }
}