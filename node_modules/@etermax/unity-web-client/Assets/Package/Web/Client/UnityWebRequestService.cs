using System.Collections;
using System.Collections.Generic;
using System.Text;
#if (NETFX_CORE || NET_4_6 || NET_STANDARD_2_0)
using System;
using System.Threading;
#endif
using Etermax.Web.Client.Error;
using Etermax.Web.Client.Methods;
using UniRx;
using UnityEngine;
using UnityEngine.Networking;

namespace Etermax.Web.Client
{
    public class UnityWebRequestService : IRequestService
    {
        private readonly IScheduler _mainThreadScheduler;
        private readonly IScheduler _asyncScheduler;
        private IObserver<HttpWebResponse> _responseObserver;

        public UnityWebRequestService(IScheduler mainThreadScheduler, IScheduler asyncScheduler)
        {
            _mainThreadScheduler = mainThreadScheduler;
            _asyncScheduler = asyncScheduler;
        }

        public IObservable<HttpWebResponse> Execute(IHttpWebRequest restRequest)
        {
            return Observable.ReturnUnit()
                .ObserveOn(_mainThreadScheduler)
                .SelectMany(_ => CheckNetworkReachability())
                .SelectMany(_ => CreateWebRequest(restRequest))
                .ObserveOn(_asyncScheduler)
                .SelectMany(unityWebRequest => ExecuteWebRequestAsObservable(unityWebRequest))
                .ObserveOn(_mainThreadScheduler);
        }

        private static IObservable<Unit> CheckNetworkReachability()
        {
            return Observable.Create<Unit>(emitter =>
            {
                if (Application.internetReachability == NetworkReachability.NotReachable)
                {
                    emitter.OnError(new NetworkNotReachable());
                }
                else
                {
                    emitter.OnNext(Unit.Default);
                    emitter.OnCompleted();
                }

                return Disposable.Empty;
            });
        }

        private IObservable<UnityWebRequest> CreateWebRequest(IHttpWebRequest restRequest)
        {
            return Observable.Create<UnityWebRequest>(emitter =>
            {
                UnityWebRequest unityWebRequest = GetUnityWebRequestFor(restRequest);
                ConfigureTimeoutAndHeaders(unityWebRequest, restRequest);
                emitter.OnNext(unityWebRequest);
                emitter.OnCompleted();
                return Disposable.Empty;
            });
        }

        private IObservable<HttpWebResponse> ExecuteWebRequestAsObservable(UnityWebRequest webRequest)
        {
            return Observable.FromCoroutine<HttpWebResponse>((observer, cancellationToken) =>
                Execute(webRequest, observer, cancellationToken));
        }

        private IEnumerator Execute(UnityWebRequest unityWebRequest, IObserver<HttpWebResponse> observer,
            CancellationToken cancellationToken)
        {
            if (cancellationToken.IsCancellationRequested) yield break;
            using (unityWebRequest)
            {
                yield return unityWebRequest.SendWebRequest();

                if (unityWebRequest.isNetworkError)
                {
                    observer.OnError(PrepareNetworkErrorResponse(unityWebRequest.error));
                }
                else
                {
                    observer.OnNext(PrepareResponse(unityWebRequest));
                }

                observer.OnCompleted();

                unityWebRequest.Dispose();
            }
        }

        private UnityWebRequest GetUnityWebRequestFor(IHttpWebRequest restRequest)
        {
            switch (restRequest.GetMethod())
            {
                case HttpMethod.Get:
                    var getRequest = UnityWebRequest.Get(restRequest.GetAbsUrl());
                    getRequest.certificateHandler = GetRequestCertificateHandlerFrom(restRequest);
                    return getRequest;
                case HttpMethod.Delete:
                    var deleteRequest = UnityWebRequest.Delete(restRequest.GetAbsUrl());
                    deleteRequest.certificateHandler = GetRequestCertificateHandlerFrom(restRequest);
                    deleteRequest.downloadHandler = new DownloadHandlerBuffer();
                    return deleteRequest;
                case HttpMethod.Post:
                    return CreateUnityRequestRequestWithPayloadFrom(restRequest, UnityWebRequest.kHttpVerbPOST);
                case HttpMethod.Put:
                    return CreateUnityRequestRequestWithPayloadFrom(restRequest, UnityWebRequest.kHttpVerbPUT);
                default: throw new HttpMethodNotSupportedException(restRequest.GetMethod());
            }
        }

        private static UnityCertificateHandler GetRequestCertificateHandlerFrom(IHttpWebRequest restRequest)
        {
            return restRequest.HasCertificateHandler
                ? new UnityCertificateHandler(restRequest.GetCertificateHandler())
                : null;
        }

        private static UnityWebRequest CreateUnityRequestRequestWithPayloadFrom(IHttpWebRequest restRequest,
            string method)
        {
            var requestWithBody = new UnityWebRequest(restRequest.GetAbsUrl())
            {
                timeout = 10,
                uploadHandler = string.IsNullOrEmpty(restRequest.GetBody())
                    ? null
                    : new UploadHandlerRaw(Encoding.UTF8.GetBytes(restRequest.GetBody())),
                downloadHandler = new DownloadHandlerBuffer(),
                certificateHandler = GetRequestCertificateHandlerFrom(restRequest),
                disposeDownloadHandlerOnDispose = true,
                disposeUploadHandlerOnDispose = true,
                method = method,
                useHttpContinue = restRequest.GetUseHttpContinue()
            };
            requestWithBody.SetRequestHeader("Content-Type", "application/json;charset=UTF-8");
            return requestWithBody;
        }

        private void ConfigureTimeoutAndHeaders(UnityWebRequest unityWebRequest, IHttpWebRequest restRequest)
        {
            unityWebRequest.timeout = restRequest.GetTimeout();
            AddHeaders(unityWebRequest, restRequest.GetHeaders());
        }

        private static void AddHeaders(UnityWebRequest unityWebRequest, Dictionary<string, string> headers)
        {
            foreach (var kvp in headers)
                unityWebRequest.SetRequestHeader(kvp.Key, kvp.Value);
        }

        private HttpWebResponse PrepareResponse(UnityWebRequest unityWebRequest)
        {
            var responseCode = unityWebRequest.responseCode;
            var downloadHandler = unityWebRequest.downloadHandler;
            var body = default(string);
            var data = default(byte[]);

            if (downloadHandler != null)
            {
                body = downloadHandler.text;
                data = downloadHandler.data;
            }

            return new HttpWebResponse((int) responseCode, body, data, unityWebRequest.GetResponseHeaders());
        }

        private NetworkException PrepareNetworkErrorResponse(string description)
        {
            return new NetworkException(description);
        }
    }
}