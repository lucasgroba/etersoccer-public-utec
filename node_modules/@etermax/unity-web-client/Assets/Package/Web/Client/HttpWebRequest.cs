using System;
using System.Collections.Generic;
using System.Linq;
using Etermax.Json;
using Etermax.Web.Client.Methods;
using Etermax.Web.Utilities;
using UniRx;
using Etermax.UnityReactiveX;
using Etermax.Web.Client.Error;
using ILogger = Etermax.Web.Client.Loggers.ILogger;

namespace Etermax.Web.Client
{
    public class HttpWebRequest : IHttpWebRequest
    {
        private string _uri;
        private readonly IRequestService _requestService;
        private readonly Dictionary<string, string> _queryParams = new Dictionary<string, string>();
        private readonly Dictionary<string, string> _headers = new Dictionary<string, string>();
        private readonly Dictionary<string, string> _pathParams = new Dictionary<string, string>();
        private string _body;
        private readonly bool _useHttpContinue = false;
        private readonly List<IRequestProxy> _requestProxies = new List<IRequestProxy>();
        private readonly IResponseProxy _responseProxy;
        private readonly HttpMethod _method;
        private readonly int _timeoutSeconds = 10;
        private readonly ILogger _logger;
        private ICertificateHandler _certificateHandler;

        private HttpWebRequest(string uri, IRequestService requestService, ILogger logger = null)
        {
            _uri = uri;
            _requestService = requestService;
            _logger = logger ?? new EmptyLogger();
        }

        public static IHttpWebRequest Get(string uri, IRequestService requestService, ILogger logger = null)
        {
            return new HttpWebRequest(uri, requestService, logger).Method(HttpMethod.Get);
        }

        public static IHttpWebRequest Put(string uri, IRequestService requestService, ILogger logger = null)
        {
            return new HttpWebRequest(uri, requestService, logger).Method(HttpMethod.Put);
        }

        public static IHttpWebRequest Delete(string uri, IRequestService requestService, ILogger logger = null)
        {
            return new HttpWebRequest(uri, requestService, logger).Method(HttpMethod.Delete);
        }

        public static IHttpWebRequest Post(string uri, IRequestService requestService, ILogger logger = null)
        {
            return new HttpWebRequest(uri, requestService, logger).Method(HttpMethod.Post);
        }

        private HttpWebRequest(HttpMethod method,
            string uri,
            Dictionary<string, string> headers,
            Dictionary<string, string> queryParams,
            string body,
            int timeoutSeconds,
            Dictionary<string, string> pathParams,
            IRequestService requestService,
            bool useHttpContinue,
            List<IRequestProxy> requestProxies,
            IResponseProxy responseProxy,
            ILogger logger,
            ICertificateHandler certificateHandler)
        {
            _pathParams = pathParams;
            _requestService = requestService;
            _method = method;
            _uri = uri;
            _headers = headers;
            _queryParams = queryParams;
            _body = body;
            _timeoutSeconds = timeoutSeconds;
            _useHttpContinue = useHttpContinue;
            _requestProxies = requestProxies;
            _responseProxy = responseProxy;
            _logger = logger;
            _certificateHandler = certificateHandler;
        }

        public bool HasCertificateHandler
        {
            get { return _certificateHandler != null; }
        }

        public string GetRawUrl()
        {
            return _uri;
        }

        public string GetUrl()
        {
            return UrlWithParams();
        }

        public string GetAbsUrl()
        {
            var queryParams = string.Join("&",
                GetQueryParams().Select(kvp => string.Format("{0}={1}", kvp.Key, kvp.Value)).ToArray());
            return UrlWithParams() + (queryParams != string.Empty ? "?" + queryParams : "");
        }

        private string UrlWithParams()
        {
            var url = _uri;
            foreach (var param in _pathParams)
            {
                var key = (param.Key[0] == ':') ? param.Key.Remove(0, 1) : param.Key;
                url = url.SafeReplace(key, param.Value, true);
            }

            return url;
        }

        public Dictionary<string, string> GetPathParams()
        {
            return _pathParams;
        }

        public string GetBody()
        {
            return _body;
        }

        public HttpMethod GetMethod()
        {
            return _method;
        }

        public int GetTimeout()
        {
            return _timeoutSeconds;
        }

        public Dictionary<string, string> GetHeaders()
        {
            return _headers;
        }

        public Dictionary<string, string> GetQueryParams()
        {
            return _queryParams;
        }

        public bool GetUseHttpContinue()
        {
            return _useHttpContinue;
        }


        public ICertificateHandler GetCertificateHandler()
        {
            return _certificateHandler;
        }

        public IHttpWebRequest
            Url(string uri)
        {
            _uri = uri;
            return new HttpWebRequest(_method, uri, _headers, _queryParams, _body, _timeoutSeconds, _pathParams,
                _requestService, _useHttpContinue, _requestProxies, _responseProxy, _logger, _certificateHandler);
        }

        public IHttpWebRequest Method(HttpMethod method)
        {
            return new HttpWebRequest(method, _uri, _headers, _queryParams, _body, _timeoutSeconds, _pathParams,
                _requestService, _useHttpContinue, _requestProxies, _responseProxy, _logger, _certificateHandler);
        }

        public IHttpWebRequest AddBearerAuthentication(string token)
        {
            _headers["Authorization"] = string.Format("Bearer {0}", token);
            return new HttpWebRequest(_method, _uri, new Dictionary<string, string>(_headers), _queryParams,
                _body, _timeoutSeconds, _pathParams, _requestService, _useHttpContinue, _requestProxies, _responseProxy,
                _logger, _certificateHandler);
        }

        public IHttpWebRequest AddQueryParam(string paramName, string paramValue)
        {
            _queryParams[paramName] = paramValue;
            return new HttpWebRequest(_method, _uri, _headers, new Dictionary<string, string>(_queryParams),
                _body, _timeoutSeconds, _pathParams, _requestService, _useHttpContinue, _requestProxies, _responseProxy,
                _logger, _certificateHandler);
        }

        public IHttpWebRequest ReplacePathParam(string key, string value)
        {
            if (!_uri.Contains(key))
                throw new PathParamInUrlNotFoundException(key);
            _pathParams[key] = value;
            return new HttpWebRequest(_method, _uri, _headers, _queryParams, _body, _timeoutSeconds,
                new Dictionary<string, string>(_pathParams), _requestService, _useHttpContinue, _requestProxies,
                _responseProxy, _logger, _certificateHandler);
        }

        public IHttpWebRequest Timeout(int timeout)
        {
            return new HttpWebRequest(_method, _uri, _headers, _queryParams, _body, timeout, _pathParams,
                _requestService, _useHttpContinue, _requestProxies, _responseProxy, _logger, _certificateHandler);
        }

        public IHttpWebRequest PutHeaders(string name, string value)
        {
            _headers[name] = value;
            return new HttpWebRequest(_method, _uri, new Dictionary<string, string>(_headers), _queryParams,
                _body, _timeoutSeconds, _pathParams, _requestService, _useHttpContinue, _requestProxies, _responseProxy,
                _logger, _certificateHandler);
        }

        public IHttpWebRequest PutHeaders(IDictionary<string, string> headers)
        {
            foreach (var header in headers)
            {
                _headers[header.Key] = header.Value;
            }

            return new HttpWebRequest(_method, _uri, new Dictionary<string, string>(_headers), _queryParams,
                _body, _timeoutSeconds, _pathParams, _requestService, _useHttpContinue, _requestProxies, _responseProxy,
                _logger, _certificateHandler);
        }

        public IHttpWebRequest UseHttpContinue()
        {
            return new HttpWebRequest(_method, _uri, _headers, _queryParams,
                _body, _timeoutSeconds, _pathParams, _requestService, true, _requestProxies, _responseProxy, _logger,
                _certificateHandler);
        }

        public IHttpWebRequest SetRequestProxy(IRequestProxy requestProxy)
        {
            _requestProxies.Add(requestProxy);
            return new HttpWebRequest(_method, _uri, _headers, _queryParams,
                _body, _timeoutSeconds, _pathParams, _requestService, _useHttpContinue, _requestProxies, _responseProxy,
                _logger, _certificateHandler);
        }

        public IHttpWebRequest SetRequestProxy(List<IRequestProxy> requestProxies)
        {
            requestProxies.ForEach(proxy => _requestProxies.Add(proxy));
            return new HttpWebRequest(_method, _uri, _headers, _queryParams,
                _body, _timeoutSeconds, _pathParams, _requestService, _useHttpContinue, _requestProxies, _responseProxy,
                _logger, _certificateHandler);
        }

        public IHttpWebRequest SetResponseProxy(IResponseProxy responseProxy)
        {
            return new HttpWebRequest(_method, _uri, _headers, _queryParams,
                _body, _timeoutSeconds, _pathParams, _requestService, _useHttpContinue, _requestProxies, responseProxy,
                _logger, _certificateHandler);
        }

        public IHttpWebRequest SetCertificateHandler(ICertificateHandler certificateHandler)
        {
            return new HttpWebRequest(_method, _uri, _headers, _queryParams,
                _body, _timeoutSeconds, _pathParams, _requestService, _useHttpContinue, _requestProxies, _responseProxy,
                _logger, certificateHandler);
        }

        public IObservable<HttpWebResponse> Send()
        {
            return Send(string.Empty);
        }

        public IObservable<HttpWebResponse> Send(JsonObject jsonObject)
        {
            return Send(jsonObject.ToString());
        }

        public IObservable<HttpWebResponse> Send<T>(JsonArray<T> jsonArray)
        {
            return Send(jsonArray.ToString());
        }

        public IObservable<HttpWebResponse> Send(string json)
        {
            return SendJson(json);
        }

        public IObservable<HttpWebResponse> SendJsonObject(JsonObject jsonObject)
        {
            return SendJson(jsonObject.ToString());
        }

        public IObservable<HttpWebResponse> SendJsonArray<T>(JsonArray<T> jsonArray)
        {
            return SendJson(jsonArray.ToString());
        }

        public IObservable<HttpWebResponse> SendJson(string json)
        {
            _body = json;
            return ProxyRequest(Copy())
                .Do(LogRequest)
                .SelectMany(request =>
                {
                    return _requestService
                        .Execute(request)
                        .DoOnError(response => LogRequestResponseError(request, response))
                        .SelectMany(response => ProxyResponse(request, response))
                        .Do(response => LogRequestResponse(request, response));
                })
                .Select(ValidateResponse);
        }

        private void LogRequest(IHttpWebRequest request)
        {
            var method = request.GetMethod().ToString().ToUpper() + " -> " + request.GetAbsUrl();
            var contentTypeJson = string.IsNullOrEmpty(request.GetBody()) ? "" :
                request.GetHeaders().ContainsKey("Content-Type") ? "" : " -H \"Content-Type: application/json\"";
            
            var headers = request.GetHeaders().Any()
                ? "\n--------HEADERS--------\n" + request.GetHeaders()
                    .Aggregate("", (acc, pair) => acc + pair.Key + " : " + pair.Value + "\n")
                : "";
            var body = string.IsNullOrEmpty(request.GetBody())
                ? ""
                : "\n--------PAYLOAD----------\n" + request.GetBody();


            var headersCurl = request.GetHeaders().Any() ? GetHeadersForCurl(request.GetHeaders()) : "";
            var curlCommand = "curl -X " + request.GetMethod().ToString().ToUpper() + " " + request.GetAbsUrl() +
                              headersCurl + contentTypeJson + " -d '" + request.GetBody() + "'";


            _logger.Write("Etermax.Web.Client", "[REQ] " + method +
                                                headers +
                                                body +
                                                "\n" +
                                                "\n--------CURL CMD----------\n" +
                                                curlCommand +
                                                "\n");
        }

        private string GetHeadersForCurl(Dictionary<string, string> headers)
        {
            return headers.Aggregate("", (acc, pair) => acc + " -H \"" + pair.Key + " : " + pair.Value + "\"");
        }

        private void LogRequestResponse(IHttpWebRequest request, HttpWebResponse response)
        {
            var method = request.GetMethod().ToString().ToUpper() + " -> " + request.GetAbsUrl();
            var statusEnum = HttpStatusCode.Unknown;
            var statusCode = (HttpStatusCode) response.StatusCode;
            _logger.Write("Etermax.Web.Client", "[RES] " + method +
                                                "\n-----STATUS-CODE------\n" +
                                                response.StatusCode + " " + statusCode +
                                                "\n--------BODY----------\n" +
                                                response.Body +
                                                "\n\n");
        }

        private void LogRequestResponseError(IHttpWebRequest request, Exception responseError)
        {
            if (responseError is HttpWebResponseError)
            {
                var webError = (HttpWebResponseError) responseError;
                var method = request.GetMethod().ToString().ToUpper() + " -> " + request.GetAbsUrl();
                var statusEnum = HttpStatusCode.Unknown;
                var statusCode = (HttpStatusCode) webError.StatusCode;
                _logger.Write("Etermax.Web.Client", "[RES ERROR] " + method +
                                                    "\n-----STATUS-CODE------\n" +
                                                    webError.StatusCode + " " + statusCode +
                                                    "\n--------BODY----------\n" +
                                                    webError.Body +
                                                    "\n\n");
            }
            else if (responseError is NetworkException || responseError is NetworkNotReachable)
            {
                _logger.Write("Etermax.Web.Client", "Could not reach " + request.GetAbsUrl() + " .Check connection.");
            }
        }

        private HttpWebResponse ValidateResponse(HttpWebResponse proxiedResponse)
        {
            if (proxiedResponse.StatusCode >= 400)

                throw new HttpWebResponseError(proxiedResponse.StatusCode,
                    proxiedResponse.Body,
                    proxiedResponse.RawData,
                    proxiedResponse.Headers);

            return proxiedResponse;
        }

        private IObservable<IHttpWebRequest> ProxyRequest(IHttpWebRequest request)
        {
            return Observable.Create<Unit>(emitter =>
                {
                    if (_requestProxies.Any())
                    {
                        emitter.OnNext(Unit.Default);
                        emitter.OnCompleted();
                    }
                    else
                        emitter.OnCompleted();

                    return Disposable.Empty;
                })
                // .SelectMany(_ => Observable.Return(_requestProxies.Aggregate(request, (acc, cur) => cur.Proxy(acc).Wait())))
                .SelectMany(_ =>
                    {
                        return _requestProxies.Aggregate(Observable.Return(request),
                            (previousCall, currentProxy) => previousCall.SelectMany(req => currentProxy.Proxy(req)));
                    })
                .SwitchIfEmpty(() => Observable.Return(request));
        }

        private IObservable<IHttpWebRequest> Proxy(IRequestProxy requestProxy, IHttpWebRequest request)
        {
            return requestProxy.Proxy(request);
        }

        private IObservable<HttpWebResponse> ProxyResponse(IHttpWebRequest proxiedRequest,
            HttpWebResponse httpWebResponse)
        {
            return Observable.Create<Unit>(emitter =>
                    {
                        if (_responseProxy != null)
                        {
                            emitter.OnNext(Unit.Default);
                            emitter.OnCompleted();
                        }
                        else
                            emitter.OnCompleted();

                        return Disposable.Empty;
                    }
                )
                .SelectMany(_ => _responseProxy.Proxy(proxiedRequest, httpWebResponse))
                .SwitchIfEmpty(() => Observable.Return(httpWebResponse));
        }

        private HttpWebRequest Copy()
        {
            return new HttpWebRequest(_method,
                _uri,
                _headers,
                _queryParams,
                _body,
                _timeoutSeconds,
                _pathParams,
                _requestService,
                _useHttpContinue,
                _requestProxies,
                _responseProxy,
                _logger,
                _certificateHandler);
        }
    }
}