using System.Collections.Generic;
using Etermax.Json;
using Etermax.Web.Client.Methods;
using UniRx;
using System;

namespace Etermax.Web.Client {
    public interface IHttpWebRequest {
        bool HasCertificateHandler { get; }
        string GetRawUrl();
        string GetUrl();
        string GetAbsUrl();
        Dictionary<string, string> GetPathParams();
        string GetBody();
        HttpMethod GetMethod();
        int GetTimeout();
        Dictionary<string, string> GetHeaders();
        Dictionary<string, string> GetQueryParams();
        bool GetUseHttpContinue();
        ICertificateHandler GetCertificateHandler();
        IHttpWebRequest Url(string uri);
        IHttpWebRequest Method(HttpMethod method);
        IHttpWebRequest AddBearerAuthentication(string token);
        IHttpWebRequest AddQueryParam(string paramName, string paramValue);
        IHttpWebRequest ReplacePathParam(string key, string value);
        IHttpWebRequest Timeout(int timeout);
        IHttpWebRequest PutHeaders(string name, string value);
        IHttpWebRequest PutHeaders(IDictionary<string, string> headers);
        IHttpWebRequest UseHttpContinue();
        IObservable<HttpWebResponse> Send();
        IObservable<HttpWebResponse> Send(JsonObject jsonObject);
        IObservable<HttpWebResponse> Send<T>(JsonArray<T> jsonArray);
        IObservable<HttpWebResponse> Send(string json);
        IObservable<HttpWebResponse> SendJsonObject(JsonObject jsonObject);
        IObservable<HttpWebResponse> SendJsonArray<T>(JsonArray<T> jsonArray);
        IObservable<HttpWebResponse> SendJson(string json);
        IHttpWebRequest SetRequestProxy(IRequestProxy requestProxy);
        IHttpWebRequest SetRequestProxy(List<IRequestProxy> requestProxies);
        IHttpWebRequest SetResponseProxy(IResponseProxy responseProxy);
        IHttpWebRequest SetCertificateHandler(ICertificateHandler certificateHandler);
    }
}