using System;
using System.Collections.Generic;
using Etermax.Web.Client.Loggers;
using Etermax.Web.Utilities;
using UniRx;

namespace Etermax.Web.Client
{
    public class ReactiveWebClient : IWebClient
    {
        private ILogger _logger;
        private List<IRequestProxy> _requestProxies = new List<IRequestProxy>();
        private IResponseProxy _responseProxy;
        private IScheduler _mainThreadScheduler;
        private IScheduler _asyncScheduler;
        
        
        [Obsolete("Use ReactiveWebClientBuilder")]
        public static ReactiveWebClient Create()
        {
            return new ReactiveWebClient();
        }

        [Obsolete("Use ReactiveWebClientBuilder")]
        private ReactiveWebClient(ILogger logger = null)
        {
            if (logger == null)
                logger = new EmptyLogger();
            _logger = logger;
            _mainThreadScheduler = Scheduler.MainThread;
            _asyncScheduler = Scheduler.DefaultSchedulers.AsyncConversions;
        }

        public void SetLogger(ILogger logger)
        {
            _logger = logger;
        }

        public void SetRequestProxy(IRequestProxy requestProxy)
        {
            _requestProxies.Add(requestProxy);
        }

        public void SetRequestProxies(List<IRequestProxy> requestProxies)
        {
            _requestProxies = requestProxies;
        }

        public void SetResponseProxy(IResponseProxy responseProxy)
        {
            _responseProxy = responseProxy;
        }

        public void SetMainThreadScheduler(IScheduler mainThreadScheduler)
        {
            _mainThreadScheduler = mainThreadScheduler;
        }

        public void SetAsyncThreadScheduler(IScheduler asyncScheduler)
        {
            _asyncScheduler = asyncScheduler;
        }

        public IHttpWebRequest Get(string uri)
        {
            return HttpWebRequest
                .Get(uri, new UnityWebRequestService(_mainThreadScheduler, _asyncScheduler), _logger)
                .SetRequestProxy(_requestProxies)
                .SetResponseProxy(_responseProxy);
        }

        public IHttpWebRequest Post(string uri)
        {
            return HttpWebRequest
                .Post(uri, new UnityWebRequestService(_mainThreadScheduler, _asyncScheduler), _logger)
                .SetRequestProxy(_requestProxies)
                .SetResponseProxy(_responseProxy);
        }

        public IHttpWebRequest Delete(string uri)
        {
            return HttpWebRequest
                .Delete(uri, new UnityWebRequestService(_mainThreadScheduler, _asyncScheduler), _logger)
                .SetRequestProxy(_requestProxies)
                .SetResponseProxy(_responseProxy);
        }

        public IHttpWebRequest Put(string uri)
        {
            return HttpWebRequest
                .Put(uri, new UnityWebRequestService(_mainThreadScheduler, _asyncScheduler), _logger)
                .SetRequestProxy(_requestProxies)
                .SetResponseProxy(_responseProxy);
        }
    }

    public class ReactiveWebClientBuilder
    {
        private ILogger _logger;
        private List<IRequestProxy> _requestProxies = new List<IRequestProxy>();
        private IResponseProxy _responseProxy;
        private IScheduler _mainThreadScheduler = Scheduler.MainThread;
        private IScheduler _asyncScheduler = Scheduler.DefaultSchedulers.AsyncConversions;

        public static ReactiveWebClientBuilder New()
        {
            return new ReactiveWebClientBuilder();
        }
        
        [Obsolete("Use static method New instead of new constructor")]
        public ReactiveWebClientBuilder()
        {
        }

        [Obsolete("Use AddRequestProxy instead. This method will be deprecated in the future version.")]
        public ReactiveWebClientBuilder WithRequestProxy(IRequestProxy requestProxy)
        {
            _requestProxies.Add(requestProxy);
            return this;
        }

        public ReactiveWebClientBuilder AddRequestProxy(IRequestProxy requestProxy)
        {
            return WithRequestProxy(requestProxy);
        }

        public ReactiveWebClientBuilder WithResponseProxy(IResponseProxy responseProxy)
        {
            _responseProxy = responseProxy;
            return this;
        }

        public ReactiveWebClientBuilder WithLogger(ILogger logger)
        {
            _logger = logger;
            return this;
        }

        public ReactiveWebClientBuilder WithMainThreadScheduler(IScheduler scheduler)
        {
            _mainThreadScheduler = scheduler;
            return this;
        }

        public ReactiveWebClientBuilder WithAsyncThreadScheduler(IScheduler scheduler)
        {
            _asyncScheduler = scheduler;
            return this;
        }

        public ReactiveWebClient Build()
        {
            var webClient = ReactiveWebClient.Create();
            if (_logger != null)
                webClient.SetLogger(_logger);
            if (_requestProxies != null)
                webClient.SetRequestProxies(_requestProxies);
            if (_responseProxy != null)
                webClient.SetResponseProxy(_responseProxy);
            if (_mainThreadScheduler != null)
                webClient.SetMainThreadScheduler(_mainThreadScheduler);
            if (_asyncScheduler != null)
                webClient.SetAsyncThreadScheduler(_asyncScheduler);
            return webClient;
        }
    }
}